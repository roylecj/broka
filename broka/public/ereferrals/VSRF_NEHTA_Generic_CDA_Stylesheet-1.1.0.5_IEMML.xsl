<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2012 NEHTA

   Licensed under the NEHTA Open Source (Apache) License; you may not use this
   file except in compliance with the License. A copy of the License is in the
   'license.txt' file, which should be provided with this work.

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
   License for the specific language governing permissions and limitations
   under the License.
-->

<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:cda="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:ext="http://ns.electronichealth.net.au/Ci/Cda/Extensions/3.0"
                exclude-result-prefixes="xsi cda ext">

  <!-- OUTPUT -->
  <!--================================================================================================================================================================================-->
  <xsl:output method="html" indent="yes" version="4.01" encoding="UTF-8"
              doctype-system="http://www.w3.org/TR/html4/strict.dtd"
              doctype-public="-//W3C//DTD HTML 4.01//EN"/>
  <!--================================================================================================================================================================================-->
  <!-- [END] OUTPUT -->

  <xsl:param name="ShowAdministrativeSection"></xsl:param>


  <!-- CONSTANTS -->
  <!--================================================================================================================================================================================-->
  <!-- NEHTA CDA Rendering Specification Object Identifier -->
  <xsl:variable name="NEHTA_CDA_RENDERING_SPECIFICATION_OID">1.2.36.1.2001.1001.100.149</xsl:variable>

  <!-- Version of the NEHTA Generic CDA Stylesheet -->
  <xsl:variable name="NEHTA_GENERIC_CDA_STYLESHEET_VERSION">1.1.0</xsl:variable>

  <!-- Version note -->
  <xsl:variable name="VERSION_NOTE">
    HTML Generated by the NEHTA Generic CDA Stylesheet Version: <xsl:value-of select="$NEHTA_GENERIC_CDA_STYLESHEET_VERSION"/>
  </xsl:variable>

  <!-- Do note edit note -->
  <xsl:variable name="DO_NOT_EDIT_NOTE">Do NOT edit this HTML directly: it was generated via an XSLT transformation from a source CDA Release 2 XML document.</xsl:variable>

  <!-- CDA Rendering Specification Incompatibility Warning -->
  <xsl:variable name="CDA_RENDERING_SPECIFICATION_INCOMPATIBILITY_WARNING">This CDA Document requires a more recent version of the CDA rendering infrastructure than your system currently supports.</xsl:variable>

  <!-- <div> id attribute values-->
  <xsl:variable name="BANNER_DIV_ID">BANNER</xsl:variable>
  <xsl:variable name="LOGO_IMG_ID">LOGO</xsl:variable>
  <xsl:variable name="CONTENT_DIV_ID">CONTENT</xsl:variable>
  <xsl:variable name="DETAILS_DIV_ID">DETAILS</xsl:variable>

  <!-- Provider Identifier CSS Classes -->
  <xsl:variable name="PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS">PROVIDER_INDIVIDUAL_IDENTIFIER</xsl:variable>
  <xsl:variable name="PROVIDER_ORGANISATION_IDENTIFIER_CSS_CLASS">PROVIDER_ORGANISATION_IDENTIFIER</xsl:variable>

  <!-- Version of the NEHTA CDA Rendering Specification supported by the stylesheet -->
  <xsl:variable name="NEHTA_GENERIC_CDA_STYLESHEET_SUPPORTED_CDA_RENDERING_SPECIFICATION_VERSION">1.0</xsl:variable>
  <xsl:variable name="NEHTA_GENERIC_CDA_STYLESHEET_SUPPORTED_CDA_RENDERING_SPECIFICATION_MAJOR_VERSION" select="substring-before($NEHTA_GENERIC_CDA_STYLESHEET_SUPPORTED_CDA_RENDERING_SPECIFICATION_VERSION, '.')"/>
  <xsl:variable name="NEHTA_GENERIC_CDA_STYLESHEET_SUPPORTED_CDA_RENDERING_SPECIFICATION_MINOR_VERSION" select="substring-after($NEHTA_GENERIC_CDA_STYLESHEET_SUPPORTED_CDA_RENDERING_SPECIFICATION_VERSION, '.')"/>

  <!-- NEHTA CDA Implementation Guide Object Identifiers -->
  <xsl:variable name="NEHTA_DISCHARGE_SUMMARY_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.4</xsl:variable>
  <xsl:variable name="NEHTA_SHARED_HEALTH_SUMMARY_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.120</xsl:variable>
  <xsl:variable name="NEHTA_E_REFERRAL_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.2</xsl:variable>
  <xsl:variable name="NEHTA_SPECIALIST_LETTER_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.132</xsl:variable>
  <xsl:variable name="NEHTA_EVENT_SUMMARY_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.136</xsl:variable>
  <xsl:variable name="NEHTA_E_PRESCRIPTION_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.74</xsl:variable>
  <xsl:variable name="NEHTA_DISPENSE_RECORD_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.75</xsl:variable>
  <xsl:variable name="NEHTA_PRESCRIPTION_REQUEST_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.101</xsl:variable>
  <xsl:variable name="NEHTA_AUSTRALIAN_CHILDHOOD_IMMUNISATION_REGISTER_RECORD_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.144</xsl:variable>
  <xsl:variable name="NEHTA_AUSTRALIAN_ORGAN_DONOR_REGISTER_RECORD_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.147</xsl:variable>
  <xsl:variable name="NEHTA_DVA_BENEFITS_REPORT_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.140</xsl:variable>
  <xsl:variable name="NEHTA_PHARMACEUTICAL_BENEFITS_REPORT_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.142</xsl:variable>
  <xsl:variable name="NEHTA_CONSUMER_ENTERED_NOTES_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.151</xsl:variable>
  <xsl:variable name="NEHTA_CONSUMER_ENTERED_HEALTH_SUMMARY_CDA_IMPLEMENTATION_GUIDE_OID">1.2.36.1.2001.1001.101.100.1002.153</xsl:variable>

  <!-- Page widths -->
  <xsl:variable name="FULL_VIEWPORT_WIDTH">1024</xsl:variable>
  <xsl:variable name="TOP_MARGIN_WIDTH">4</xsl:variable>
  <xsl:variable name="LEFT_MARGIN_WIDTH">4</xsl:variable>
  <xsl:variable name="RIGHT_MARGIN_WIDTH">4</xsl:variable>
  <xsl:variable name="CONTENT_SCROLL_BAR_WIDTH">20</xsl:variable>
  <xsl:variable name="FULL_CONTENT_WIDTH" select="$FULL_VIEWPORT_WIDTH - 24"/>
  <xsl:variable name="HALF_CONTENT_WIDTH" select="$FULL_CONTENT_WIDTH div 2"/>
  <xsl:variable name="FIFTH_CONTENT_WIDTH" select="($FULL_CONTENT_WIDTH div 5) - 2"/>
  <xsl:variable name="QUARTER_CONTENT_WIDTH" select="$FULL_CONTENT_WIDTH div 4"/>
  <xsl:variable name="EIGHTH_CONTENT_WIDTH" select="$FULL_CONTENT_WIDTH div 8"/>
  <xsl:variable name="TENTH_CONTENT_WIDTH" select="$FULL_CONTENT_WIDTH div 10"/>
  <xsl:variable name="THREE_QUARTER_CONTENT_WIDTH" select="($FULL_CONTENT_WIDTH div 4) * 3"/>
  <xsl:variable name="PAGE_HEADER_ITEM_GAP">75</xsl:variable>
  <xsl:variable name="SUMMARY_DETAILS_LEFT_GAP" select="$FULL_CONTENT_WIDTH div 34"/>
  <xsl:variable name="VSRF_HALFPAGE_WIDTH" select="$HALF_CONTENT_WIDTH - 10"/>
  <xsl:variable name="VSRF_ITEM_WIDTH" select="$EIGHTH_CONTENT_WIDTH"/>

  <xsl:variable name="AKA_STRING">a.k.a. </xsl:variable>
  <xsl:variable name="SECTION_TITLE_NAVIGATION_SEPARATOR" select="' > '"/>

  <!-- Colours -->
  <xsl:variable name="GENERAL_TABLE_HEADER_CELL_BACKGROUND_COLOUR">#FFFFFF</xsl:variable>
  <xsl:variable name="GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR">#EEEEEE</xsl:variable>

  <!-- IEMML VSRF Rendering -->
  <xsl:variable name="renderVSRF" select="'true'"/>

  <!--================================================================================================================================================================================-->
  <!-- [END] CONSTANTS -->




  <!-- GLOBAL VARIABLES -->
  <!--================================================================================================================================================================================-->
  <xsl:variable name="cdaDocumentCdaRenderingSpecificationVersion" select="/cda:ClinicalDocument/cda:templateId[@root='1.2.36.1.2001.1001.100.149']/@extension"/>
  <xsl:variable name="cdaDocumentCdaRenderingSpecificationMajorVersionNumber" select="substring-before($cdaDocumentCdaRenderingSpecificationVersion, '.')"/>
  <xsl:variable name="cdaDocumentCdaRenderingSpecificationMinorVersionNumber" select="substring-after($cdaDocumentCdaRenderingSpecificationVersion, '.')"/>
  <xsl:variable name="isStylesheetCompatibleWithRequiredRenderingSpecificationVersion">
    <xsl:choose>
      <xsl:when test="string-length($cdaDocumentCdaRenderingSpecificationVersion) &gt; 0">
        <xsl:choose>
          <xsl:when test="$cdaDocumentCdaRenderingSpecificationMajorVersionNumber &gt; $NEHTA_GENERIC_CDA_STYLESHEET_SUPPORTED_CDA_RENDERING_SPECIFICATION_MAJOR_VERSION">false</xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <xsl:when test="$cdaDocumentCdaRenderingSpecificationMajorVersionNumber = $NEHTA_GENERIC_CDA_STYLESHEET_SUPPORTED_CDA_RENDERING_SPECIFICATION_MAJOR_VERSION">
                <xsl:choose>
                  <xsl:when test="$cdaDocumentCdaRenderingSpecificationMinorVersionNumber &gt; $NEHTA_GENERIC_CDA_STYLESHEET_SUPPORTED_CDA_RENDERING_SPECIFICATION_MINOR_VERSION">false</xsl:when>
                  <xsl:otherwise>true</xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>true</xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>true</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <!-- Patient Details -->
  <xsl:variable name="patientIHI">
    <xsl:call-template name="formatHI">
      <xsl:with-param name="hiValue"
         select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:asEntityIdentifier/ext:id[@assigningAuthorityName='IHI']/@root"
            />
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="patientMRN">
    <xsl:if test="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:asEntityIdentifier[ext:code/@code='MR']/ext:id/@extension and
            not (/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:asEntityIdentifier[ext:code/@code='MR']/ext:id/@displayable='false')">
      <xsl:value-of select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:asEntityIdentifier[ext:code/@code='MR']/ext:id/@extension"/>
    </xsl:if>
  </xsl:variable>
  <xsl:variable name="patientName">
    <xsl:call-template name="show-patient-name">
      <xsl:with-param name="name"
          select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:name"/>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="preferredName">
    <xsl:call-template name="show-preferred-name">
      <xsl:with-param name="prefName"
          select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:name"/>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="patientDateOfBirth">
    <xsl:call-template name="show-date">
      <xsl:with-param name="datetime"
          select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:birthTime"/>
    </xsl:call-template>
  </xsl:variable>
  <xsl:variable name="patientDeceasedStatus">
    <xsl:choose>
      <xsl:when test="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:deceasedInd and
                /cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:deceasedInd/@value and
                /cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:deceasedInd/@value='true'">true</xsl:when>
      <xsl:otherwise>false</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="patientAge">
    <xsl:choose>
      <xsl:when test="$patientDeceasedStatus='true'">DECEASED</xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="calculateAgeInYears">
          <xsl:with-param name="birthDate">
            <xsl:value-of
                select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:birthTime/@value"/>
          </xsl:with-param>
          <xsl:with-param name="docDate">
            <xsl:value-of select="substring(/cda:ClinicalDocument/cda:effectiveTime/@value,1,8)"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:text> years</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="patientSex">
    <xsl:if test="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode and
                      /cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@code and
                      string-length(/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@code) &gt; 0 and
                      /cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@codeSystem='2.16.840.1.113883.13.68'">
      <xsl:choose>
        <xsl:when test="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@code = 'M'">Male</xsl:when>
        <xsl:when test="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@code = 'F'">Female</xsl:when>
        <xsl:when test="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@code = 'I'">Intersex or Indeterminate</xsl:when>
        <xsl:when test="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@code = 'N'">Not Stated/Inadequately Described</xsl:when>
        <xsl:otherwise>Unknown</xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:variable>

  <!-- *********************** VSRF additions to gather data from structuredBody Narrative fields ***************** -->
  <xsl:variable name="lc" select="'abcdefghijklmnopqrstuvwxyz'"/>
  <xsl:variable name="uc" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>

  <xsl:variable name="VSRFReduction">
    <xsl:choose>
      <xsl:when test="$renderVSRF='true'">3</xsl:when>
      <xsl:otherwise>0</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <!-- Structured Body Narrative Element Names -->
  <xsl:variable name="Narr_Ref_Det">Referral Detail</xsl:variable>
  <xsl:variable name="Narr_Adm_Obs">Administrative Observations</xsl:variable>
  <xsl:variable name="Narr_Med_Hist">Medical History</xsl:variable>
  <xsl:variable name="Narr_Meds">Medications</xsl:variable>
  <xsl:variable name="Narr_Adv_React">Adverse Reactions</xsl:variable>
  <xsl:variable name="Narr_Investigations">Diagnostic Investigations</xsl:variable>
  <xsl:variable name="Narr_Alert">Alert</xsl:variable>
  <xsl:variable name="Narr_Fam_Hist">Family History</xsl:variable>
  <xsl:variable name="Narr_Soc_Hist">Social History</xsl:variable>
  <xsl:variable name="Narr_Life_Fac">Lifestyle Factors</xsl:variable>
  <xsl:variable name="Narr_Obs">Observations</xsl:variable>
  <xsl:variable name="Narr_Imm">Immunisations</xsl:variable>

  <!-- Referral Detail Narrative Items -->
  <xsl:variable name="RD_ReferralDate" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title='Referral Detail']/cda:text/cda:table[cda:caption='Date and Duration']/cda:tbody/cda:tr/cda:td[1]" />
  <xsl:variable name="RD_ReferralLength" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title='Referral Detail']/cda:text/cda:table[cda:caption='Date and Duration']/cda:tbody/cda:tr/cda:td[2]" />
  <xsl:variable name="RD_Priority" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='priority']/cda:td[2]" />
  <xsl:variable name="RD_ServiceRequested" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='requested service']/cda:td[2]" />
  <xsl:variable name="RD_OutpatientClinicSpecialty" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='requested specialty']/cda:td[2]" />
  <xsl:variable name="RD_OtherNotes" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='other notes']/cda:td[2]" />

  <!-- Administative Observations Narrative Items -->
  <xsl:variable name="AO_ReferringGPProviderNumber" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='provider number']/cda:td[2]" />
  <xsl:variable name="AO_ConsentToReferral" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='consent to referral and sharing of relevant information']/cda:td[2]" />
  <xsl:variable name="AO_FeedbackRequested" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='feedback requested']/cda:td[2]" />
  <xsl:variable name="AO_GPReviewDate" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='gp review date']/cda:td[2]" />
  <xsl:variable name="AO_PatientsOccupation" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='occupation']/cda:td[2]" />
  <xsl:variable name="AO_OverseasVisitor" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='overseas visitor']/cda:td[2]" />
  <xsl:variable name="AO_CountryOfOrigin" select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:birthplace/cda:place/cda:addr/cda:country" />
  <xsl:variable name="AO_AlternateContactPersonName" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='alternative contact name']/cda:td[2]" />
  <xsl:variable name="AO_AlternateContactPersonRelationship" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='alternative contact relationship']/cda:td[2]" />
  <xsl:variable name="AO_AlternateContactPersonPh" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='alternative contact ph number']/cda:td[2]" />
  <xsl:variable name="AO_AlternateContactPersonMobilePh" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='alternative contact mobile ph']/cda:td[2]" />
  <xsl:variable name="AO_IndigenousStatus" select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:ethnicGroupCode/@displayName" />
  <xsl:variable name="AO_InterpreterRequired" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='interpreter required']/cda:td[2]" />
  <xsl:variable name="AO_PreferredLanguage" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='preferred language']/cda:td[2]" />
  <xsl:variable name="AO_MedicareNumberAndExpiry" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='medicare card number']/cda:td[2]" />
  <xsl:variable name="AO_DVACardType" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='dva card type']/cda:td[2]" />
  <xsl:variable name="AO_DVACardNumberAndExpiry" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='dva card number']/cda:td[2]" />
  <xsl:variable name="AO_HealthFundName" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='health fund type']/cda:td[2]" />
  <xsl:variable name="AO_HealthFundNumberAndExpiry" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='health fund number']/cda:td[2]" />
  <xsl:variable name="AO_WorkCover" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='work cover']/cda:td[2]" />
  <xsl:variable name="AO_WorkCoverClaimNumber" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='work cover no']/cda:td[2]" />
  <xsl:variable name="AO_TransportAccidentCommission" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='tac']/cda:td[2]" />
  <xsl:variable name="AO_TACNumber" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='tac no']/cda:td[2]" />
  <xsl:variable name="AO_SafetyNetNumber" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='safety net no']/cda:td[2]" />
  <xsl:variable name="AO_Pension" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='pension']/cda:td[2]" />
  <xsl:variable name="AO_PensionCardNumber" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='pension card number']/cda:td[2]" />
  <xsl:variable name="AO_PreferredName" select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:th),$uc,$lc)='preferred name']/cda:td" />

  <xsl:variable name="shortPatientName">
    <xsl:value-of select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:name/cda:given"/>
    <xsl:text/>
    <xsl:call-template name="toUpperCase">
      <xsl:with-param name="data">
        <xsl:value-of select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:name/cda:family"/>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="shortReferrerName">
    <xsl:value-of select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/cda:name/cda:given"/>
    <xsl:text/>
    <xsl:value-of select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/cda:name/cda:family"/>
  </xsl:variable>

  <!-- **************************************************** End VSRF ************************************** -->

  <!-- CDA Document Type -->
  <xsl:variable name="cdaDocumentType">
    <xsl:choose>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_DISCHARGE_SUMMARY_CDA_IMPLEMENTATION_GUIDE_OID]">e-Discharge Summary</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_SHARED_HEALTH_SUMMARY_CDA_IMPLEMENTATION_GUIDE_OID]">Shared Health Summary</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_E_REFERRAL_CDA_IMPLEMENTATION_GUIDE_OID]">e-Referral</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_SPECIALIST_LETTER_CDA_IMPLEMENTATION_GUIDE_OID]">Specialist Letter</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_EVENT_SUMMARY_CDA_IMPLEMENTATION_GUIDE_OID]">Event Summary</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_E_PRESCRIPTION_CDA_IMPLEMENTATION_GUIDE_OID]">e-Prescription</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_DISPENSE_RECORD_CDA_IMPLEMENTATION_GUIDE_OID]">Dispense Record</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_PRESCRIPTION_REQUEST_CDA_IMPLEMENTATION_GUIDE_OID]">Prescription Request</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_AUSTRALIAN_CHILDHOOD_IMMUNISATION_REGISTER_RECORD_CDA_IMPLEMENTATION_GUIDE_OID]">Australian Childhood Immunisation Register Record</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_AUSTRALIAN_ORGAN_DONOR_REGISTER_RECORD_CDA_IMPLEMENTATION_GUIDE_OID]">Australian Organ Donor Register Record</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_DVA_BENEFITS_REPORT_CDA_IMPLEMENTATION_GUIDE_OID]">DVA Benefits Report</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_PHARMACEUTICAL_BENEFITS_REPORT_CDA_IMPLEMENTATION_GUIDE_OID]">Pharmaceutical Benefits Report</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_CONSUMER_ENTERED_NOTES_CDA_IMPLEMENTATION_GUIDE_OID]">Consumer Entered Notes</xsl:when>
      <xsl:when test="/cda:ClinicalDocument/cda:templateId[@root=$NEHTA_CONSUMER_ENTERED_HEALTH_SUMMARY_CDA_IMPLEMENTATION_GUIDE_OID]">Consumer Entered Health Summary</xsl:when>

      <xsl:when test="/cda:ClinicalDocument/cda:code/@displayName and
                            string-length(/cda:ClinicalDocument/cda:code/@displayName) &gt; 0">
        <xsl:value-of select="/cda:ClinicalDocument/cda:code/@displayName"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>Clinical Document</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <!-- CDA Document Title -->
  <xsl:variable name="cdaDocumentTitle">
    <xsl:choose>
      <xsl:when test="/cda:ClinicalDocument/cda:title and
                            string-length(/cda:ClinicalDocument/cda:title)  &gt;= 1">
        <xsl:value-of select="/cda:ClinicalDocument/cda:title"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$cdaDocumentType"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <!-- Document Rendering View Title -->
  <xsl:variable name="documentRenderingViewTitle">
    <xsl:choose>
      <xsl:when test="$renderVSRF='true'">
        <xsl:value-of select="concat($cdaDocumentTitle, ' - ', $shortPatientName,' (DOB: ',$patientDateOfBirth, ') BY: ', $shortReferrerName)"/>
      </xsl:when>
      <xsl:when test="string-length($patientMRN &gt; 0)">
        <xsl:value-of select="concat($cdaDocumentTitle,
                                             ' | PATIENT: ',
                                             $patientName,
                                             ' | SEX: ',
                                             $patientSex,
                                             ' | DOB: ',
                                             $patientDateOfBirth,
                                             ' | AGE: ',
                                             $patientAge,
                                             ' | IHI: ',
                                             $patientIHI,
                                             ' | MRN: ',
                                             $patientMRN)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="concat($cdaDocumentTitle,
                                             ' | PATIENT: ',
                                             $patientName,
                                             ' | SEX: ',
                                             $patientSex,
                                             ' | DOB: ',
                                             $patientDateOfBirth,
                                             ' | AGE: ',
                                             $patientAge,
                                             ' | IHI: ',
                                             $patientIHI)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <!--================================================================================================================================================================================-->
  <!-- [END] GLOBAL VARIABLES -->




  <!-- ENTRY TEMPLATE -->
  <!--================================================================================================================================================================================-->
  <xsl:template match="/cda:ClinicalDocument">
    <xsl:element name="html">
      <xsl:element name="head">
        <xsl:element name="meta">
          <xsl:attribute name="name">viewport</xsl:attribute>
          <xsl:attribute name="content">
            user-scalable=yes, width=<xsl:value-of select="$FULL_VIEWPORT_WIDTH"/>
          </xsl:attribute>
        </xsl:element>
        <xsl:element name="meta">
          <xsl:attribute name="name">format-detection</xsl:attribute>
          <xsl:attribute name="content">telephone=no</xsl:attribute>
        </xsl:element>
        <xsl:comment>
          <xsl:value-of select="$DO_NOT_EDIT_NOTE"/>
        </xsl:comment>
        <xsl:comment>
          <xsl:value-of select="$VERSION_NOTE"/>
        </xsl:comment>
        <xsl:call-template name="addJavaScript"/>
        <xsl:element name="title">
          <xsl:value-of select="$documentRenderingViewTitle"/>
        </xsl:element>
        <xsl:call-template name="addCSS"/>
      </xsl:element>
      <!-- </head> -->
      <xsl:element name="body">
        <xsl:choose>
          <xsl:when test="$isStylesheetCompatibleWithRequiredRenderingSpecificationVersion='false'">
            <xsl:attribute name="onload">load('');cdaRenderSpecificationVersionWarning();</xsl:attribute>
          </xsl:when>
          <xsl:otherwise>
            <xsl:attribute name="onload">
              load('<xsl:value-of select="$DETAILS_DIV_ID"/>');
            </xsl:attribute>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:element name="div">
          <xsl:attribute name="style">position: relative;</xsl:attribute>
          <!-- Display the Banner -->
          <xsl:element name="div">
            <xsl:attribute name="id">
              <xsl:value-of select="$BANNER_DIV_ID"/>
            </xsl:attribute>
            <xsl:call-template name="getBannerTable"/>
          </xsl:element>
          <!-- </div> -->

          <!-- Display the scrollable part of the document (including Incompatibility Warning. the Details and the Body) -->
          <xsl:element name="div">
            <xsl:attribute name="id">
              <xsl:value-of select="$CONTENT_DIV_ID"/>
            </xsl:attribute>


            <!-- Display Start of Document Indicator -->
            <xsl:call-template name="getStartOfDocumentIndicator"/>

            <!-- Display the Details -->
            <xsl:element name="div">
              <xsl:attribute name="id">
                <xsl:value-of select="$DETAILS_DIV_ID"/>
              </xsl:attribute>
              <xsl:call-template name="getDetailsTable"/>
            </xsl:element>

            <!-- Display the Body -->
            <!-- ************ DH VSRF 2012 Template implementation - Rod Perry - April 2012 ********* -->
            <xsl:if test="$renderVSRF!='true'">
              <div id="IEMML_Standard" style="display:none">
                <xsl:apply-templates select="cda:component/cda:structuredBody|cda:component/cda:nonXMLBody"/>
              </div>
            </xsl:if>
            <xsl:if test="$renderVSRF='true'">
              <div id="IEMML_VSRF">
                <xsl:call-template name="getVSRF"/>
                <!-- VSRF 2012      -->
                <div class="horizontalspacer"/>
              </div>
            </xsl:if>
            <!-- **************************** End of VSRF ********************************************* -->


            <!-- Apply footnote -->
            <xsl:element name="div">
              <xsl:attribute name="id">FOOTNOTES</xsl:attribute>
              <xsl:call-template name="getFootnotesTable"/>
            </xsl:element>


            <!-- Display End of Document -->
            <xsl:call-template name="getEndOfDocumentIndicator"/>

            <!-- Space to allow scrolling to footnote references -->
            <xsl:call-template name="getSpaceToScrollToFootnotesDiv"/>
          </xsl:element>
          <!-- </div> (content div) -->
        </xsl:element>
        <!-- parent div -->
      </xsl:element>
      <!-- </body> -->
    </xsl:element>
    <!-- </html -->
  </xsl:template>
  <!--================================================================================================================================================================================-->
  <!-- [END] ENTRY TEMPLATE -->




  <!-- VSRF TEMPLATES -->
  <!--================================================================================================================================================================================-->

  <xsl:template name="getVSRF">
    <!-- Document Variables -->
    <xsl:variable name="documentId">
      <xsl:call-template name="getIdentifierFromII">
        <xsl:with-param name="iiVariable" select="/cda:ClinicalDocument/cda:id"/>
      </xsl:call-template>
    </xsl:variable>

    <!-- Patient Variables -->
    <xsl:variable name="patientGenderCode"
       select="cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@code"/>

    <xsl:variable name="patientSex">
      <xsl:choose>
        <xsl:when test="$patientGenderCode = 'M'">Male</xsl:when>
        <xsl:when test="$patientGenderCode = 'F'">Female</xsl:when>
        <xsl:otherwise>Not Stated</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="patientAddressResidence">
      <xsl:for-each select="cda:recordTarget/cda:patientRole/cda:addr[@use='H']">
        <xsl:call-template name="show-address">
          <xsl:with-param name="address" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="patientAddressPostal">
      <xsl:for-each select="cda:recordTarget/cda:patientRole/cda:addr[@use='PST']">
        <xsl:call-template name="show-address">
          <xsl:with-param name="address" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="patientContactHomePhone">
      <xsl:for-each select="cda:recordTarget/cda:patientRole/cda:telecom[@use='H' and starts-with(@value, 'tel:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="patientContactMobilePhone">
      <xsl:for-each select="cda:recordTarget/cda:patientRole/cda:telecom[@use='MC' and starts-with(@value, 'tel:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="patientContactWorkPhone">
      <xsl:for-each select="cda:recordTarget/cda:patientRole/cda:telecom[@use='WP' and starts-with(@value, 'tel:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="patientContactEmail">
      <xsl:for-each select="cda:recordTarget/cda:patientRole/cda:telecom[starts-with(@value, 'mailto:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>

    <!-- Recipient variables -->
    <xsl:variable name="recipientName" select="cda:informationRecipient/cda:intendedRecipient/cda:informationRecipient/cda:name"/>
    <xsl:variable name="recipientHpii">
      <xsl:for-each select="cda:informationRecipient/cda:intendedRecipient/cda:informationRecipient/ext:asEntityIdentifier[@classCode='IDENT']">
        <xsl:call-template name="getProviderIndividualIdentifier">
          <xsl:with-param name="entityIdentifier" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="recipientOrganization"
       select="cda:informationRecipient/cda:intendedRecipient/cda:receivedOrganization/cda:name"/>
    <xsl:variable name="recipientHpio">
      <xsl:for-each select="cda:informationRecipient/cda:intendedRecipient/cda:receivedOrganization/ext:asEntityIdentifier[@classCode='IDENT']">
        <xsl:call-template name="getProviderOrganisationIdentifier">
          <xsl:with-param name="entityIdentifier" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="recipientAddress">
      <xsl:for-each select="cda:informationRecipient/cda:intendedRecipient/cda:addr[@use='WP']">
        <xsl:call-template name="show-address">
          <xsl:with-param name="address" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="recipientPhoneNumber">
      <xsl:for-each select="cda:informationRecipient/cda:intendedRecipient/cda:telecom[@use='WP' and starts-with(@value, 'tel:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="recipientFaxNumber">
      <xsl:for-each select="cda:informationRecipient/cda:intendedRecipient/cda:telecom[@use='WP' and starts-with(@value, 'fax:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="recipientEmail">
      <xsl:for-each select="cda:informationRecipient/cda:intendedRecipient/cda:telecom[@use='WP' and starts-with(@value, 'mailto:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>

    <!-- GP variables -->
    <xsl:variable name="authorName">
      <xsl:for-each select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/cda:name[@use='L']">
        <xsl:call-template name="show-name">
          <xsl:with-param name="name" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="authorHpii">
      <xsl:for-each select="cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEntityIdentifier[@classCode='IDENT']">
        <xsl:call-template name="getProviderIndividualIdentifier">
          <xsl:with-param name="entityIdentifier" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="authorOrganization">
      <xsl:for-each select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEmployment/ext:employerOrganization">
        <xsl:value-of select="./cda:asOrganizationPartOf/cda:wholeOrganization/cda:name"/>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="authorHpio">
      <xsl:for-each select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/ext:asEntityIdentifier">
        <xsl:call-template name="getProviderOrganisationIdentifier">
          <xsl:with-param name="entityIdentifier" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="authorAddress">
      <xsl:for-each select="cda:author/cda:assignedAuthor/cda:addr[@use='WP']">
        <xsl:call-template name="show-address">
          <xsl:with-param name="address" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="authorPhoneNumber">
      <xsl:for-each select="cda:author/cda:assignedAuthor/cda:telecom[@use='WP' and starts-with(@value, 'tel:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="authorFaxNumber">
      <xsl:for-each select="cda:author/cda:assignedAuthor/cda:telecom[@use='WP' and starts-with(@value, 'fax:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="authorEmail">
      <xsl:for-each select="cda:author/cda:assignedAuthor/cda:telecom[@use='WP' and starts-with(@value, 'mailto:')]">
        <xsl:call-template name="show-telecom">
          <xsl:with-param name="telecom" select="."/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="GPProviderNumber">
      <xsl:value-of select="$AO_ReferringGPProviderNumber"/>
    </xsl:variable>

    <xsl:variable name="MedicareNumberAndExpiry">
      <xsl:value-of select="$AO_MedicareNumberAndExpiry"/>
    </xsl:variable>

    <xsl:variable name="documentVersion" select="cda:versionNumber/@value"/>
    <xsl:variable name="completionCode">
      <xsl:choose>
        <xsl:when test="/cda:ClinicalDocument/ext:completionCode/@code='F'">Final</xsl:when>
        <xsl:when test="/cda:ClinicalDocument/ext:completionCode/@code='I'">Interim</xsl:when>
        <xsl:when test="/cda:ClinicalDocument/ext:completionCode/@code='W'">Withdrawn</xsl:when>
        <xsl:otherwise>Final</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="dateCompleted">
      <xsl:call-template name="show-time">
        <xsl:with-param name="datetime" select="cda:effectiveTime"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="dateTimeAttested">
      <xsl:call-template name="show-time">
        <xsl:with-param name="datetime" select="/cda:ClinicalDocument/cda:legalAuthenticator/cda:time"/>
      </xsl:call-template>
    </xsl:variable>

    <!-- GP Referral / Consumer -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFull</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block01</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:element name="td">
            <xsl:attribute name="class">vsrfHalf</xsl:attribute>
            <!-- GP Referral -->
            <xsl:element name="table">
              <xsl:attribute name="class">vsrfHalf</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:attribute name="summary">GP Referral</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:attribute name="valign">top</xsl:attribute>
                  <xsl:element name="th">
                    <xsl:attribute name="class">VSRFheader</xsl:attribute>
                    <xsl:attribute name="align">left</xsl:attribute>
                    <xsl:attribute name="height">70</xsl:attribute>
                    <xsl:attribute name="colspan">2</xsl:attribute>
                    <xsl:element name="strong">
                      <xsl:text>GP Referral</xsl:text>
                    </xsl:element>
                    <!--  </strong>  -->
                  </xsl:element>
                  <!--  </th>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                    <xsl:attribute name="height">24</xsl:attribute>
                    <xsl:text>Referral Date:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevalue</xsl:attribute>
                    <xsl:value-of select="$RD_ReferralDate"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                    <xsl:attribute name="height">24</xsl:attribute>
                    <xsl:text>Feedback Requested:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevalue</xsl:attribute>
                    <xsl:value-of select="$AO_FeedbackRequested"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
              </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:text></xsl:text>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">vsrfHalfBox</xsl:attribute>
            <!-- Consumer -->
            <xsl:attribute name="align">right</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">vsrfHalf</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:attribute name="summary">Patient</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="th">
                    <xsl:attribute name="class">VSRFSectionL2</xsl:attribute>
                    <xsl:attribute name="colspan">2</xsl:attribute>
                    <xsl:text>Patient</xsl:text>
                  </xsl:element>
                  <!--  </th>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="colspan">2</xsl:attribute>
                    <xsl:attribute name="height">30</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID; text-align: left;</xsl:attribute>
                    <xsl:attribute name="class">patientName</xsl:attribute>                    
                    <xsl:element name="strong">
                      <xsl:value-of select="$patientName"/>
                    </xsl:element>
                    <!--  </strong>  -->
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                    <xsl:attribute name="height">30</xsl:attribute>
                    <xsl:text>Date of Birth:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevalue</xsl:attribute>
                    <xsl:attribute name="class">patientDateOfBirth</xsl:attribute>                    
                    <xsl:value-of select="$patientDateOfBirth"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                    <xsl:attribute name="height">30</xsl:attribute>
                    <xsl:text>Sex:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevalue</xsl:attribute>
                    <xsl:attribute name="class">patientSex</xsl:attribute>                    
                    <xsl:value-of select="$patientSex"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                    <xsl:attribute name="height">30</xsl:attribute>
                    <xsl:text>URNumber:</xsl:text>
                  </xsl:element>
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidesidevalue</xsl:attribute>
                    <xsl:value-of select="$patientMRN"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
              </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>

    <!-- Patient Details -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFull</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block02</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">VSRFSection</xsl:attribute>
            <xsl:text>Patient details</xsl:text>
          </xsl:element>
          <!--  </th>  -->
        </xsl:element>
        <!--  </tr>  -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">VSRFBox</xsl:attribute>
            <xsl:attribute name="width">100%</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="width">100%</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:text>Preferred name/s:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:value-of select="$preferredName"/>
                    <xsl:if test="$AO_PreferredName!=''">
                      <xsl:text>(</xsl:text>
                      <xsl:value-of select="$AO_PreferredName"/>
                      <xsl:text>)</xsl:text>
                    </xsl:if>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:text>Address:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:if test="$patientAddressResidence!=''">
                      Residence: <xsl:value-of select="substring-after($patientAddressResidence,':')"/>
                      <xsl:element name="br"/>
                    </xsl:if>
                    <xsl:if test="$patientAddressPostal!=''">
                      Postal: <xsl:value-of select="substring-after($patientAddressPostal, ':')"/>
                    </xsl:if>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:text>Phone:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$patientContactHomePhone"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:if test="$patientContactWorkPhone!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:element name="div">
                        <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                        <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                        <xsl:text>Work:</xsl:text>
                      </xsl:element>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                      <xsl:value-of select="$patientContactWorkPhone"/>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                </xsl:if>
                <xsl:if test="$patientContactMobilePhone!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:element name="div">
                        <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                        <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                        <xsl:text>Mobile:</xsl:text>
                      </xsl:element>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                      <xsl:value-of select="$patientContactMobilePhone"/>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                </xsl:if>
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:text>Email:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$patientContactEmail"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:text>Alternative Contact:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue AO_AlternateContactPersonName</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$AO_AlternateContactPersonName"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:if test="$AO_AlternateContactPersonRelationship!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:element name="div">
                        <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                        <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                        <xsl:text>Relationship:</xsl:text>
                      </xsl:element>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevalue AO_AlternateContactPersonRelationship</xsl:attribute>
                      <xsl:value-of select="$AO_AlternateContactPersonRelationship"/>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                </xsl:if>
                <xsl:if test="$AO_AlternateContactPersonPh!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:element name="div">
                        <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                        <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                        <xsl:text>Phone:</xsl:text>
                      </xsl:element>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevalue AO_AlternateContactPersonPh</xsl:attribute>
                      <xsl:value-of select="$AO_AlternateContactPersonPh"/>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                </xsl:if>
                <xsl:if test="$AO_AlternateContactPersonMobilePh!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:element name="div">
                        <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                        <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                        <xsl:text>Mobile:</xsl:text>
                      </xsl:element>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevalue AO_AlternateContactPersonMobilePh</xsl:attribute>
                      <xsl:value-of select="$AO_AlternateContactPersonMobilePh"/>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                </xsl:if>
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:text>Indigenous Status:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$AO_IndigenousStatus"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:if test="$AO_PatientsOccupation!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                      <xsl:text>Patient Occupation:</xsl:text>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                      <xsl:value-of select="$AO_PatientsOccupation"/>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                </xsl:if>
                <xsl:if test="$AO_OverseasVisitor!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                      <xsl:text>Overseas Visitor:</xsl:text>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                      <xsl:value-of select="$AO_OverseasVisitor"/>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                  <xsl:if test="$AO_CountryOfOrigin!=''">
                    <xsl:element name="tr">
                      <xsl:element name="td">
                        <xsl:element name="div">
                          <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                          <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                          <xsl:text>Country of birth:</xsl:text>
                        </xsl:element>
                      </xsl:element>
                      <!--  </td>  -->
                      <xsl:element name="td">
                        <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                        <xsl:value-of select="$AO_CountryOfOrigin"/>
                      </xsl:element>
                      <!--  </td>  -->
                    </xsl:element>
                    <!-- </tr>  -->
                  </xsl:if>
                </xsl:if>
              </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>

    <!-- Recipient / Referrer -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFull</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block03</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:element name="td">
            <!-- Recipient - Referral To -->
            <xsl:attribute name="class">vsrfHalf</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">vsrfHalfBox</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:attribute name="summary">Referral To</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="th">
                    <xsl:attribute name="class">VSRFSectionL2</xsl:attribute>
                    <xsl:attribute name="colspan">2</xsl:attribute>
                    <xsl:attribute name="align">left</xsl:attribute>
                    <xsl:text>Referral to:</xsl:text>
                  </xsl:element>
                  <!--  </th>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>             
                    <xsl:attribute name="style">border-top: 1px SOLID;</xsl:attribute>
                    <xsl:text>Name:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="class">recipientName</xsl:attribute>                           
                    <xsl:attribute name="style">border-top: 1px SOLID;</xsl:attribute>
                    <xsl:value-of select="$recipientName"/>
                    <xsl:if test="$recipientHpii!=''">
                      <xsl:element name="br"/>
                      <xsl:element name="div">
                        <xsl:attribute name="class">
                          <xsl:value-of select="$PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS"/>
                        </xsl:attribute>
                        <xsl:value-of select="$recipientHpii"/>
                      </xsl:element>
                    </xsl:if>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:if test="$recipientOrganization!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                      <xsl:text>Organisation:</xsl:text>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                      <xsl:value-of select="$recipientOrganization"/>
                      <xsl:if test="$recipientHpio!=''">
                        <xsl:element name="br"/>
                        <xsl:element name="div">
                          <xsl:attribute name="class">
                            <xsl:value-of select="$PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS"/>
                          </xsl:attribute>
                          <xsl:value-of select="$recipientHpio"/>
                        </xsl:element>
                      </xsl:if>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!--  </tr>  -->
                </xsl:if>
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Address:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="substring-after($recipientAddress, ':')"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Phone:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$recipientPhoneNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Fax:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$recipientFaxNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Email:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$recipientEmail"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
              </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:text></xsl:text>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">vsrfHalf</xsl:attribute>
            <!-- Referring General Practitioner -->
            <xsl:attribute name="align">right</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">vsrfHalfBox</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:attribute name="summary">Referring GP</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="th">
                    <xsl:attribute name="class">VSRFSectionL2</xsl:attribute>
                    <xsl:attribute name="colspan">2</xsl:attribute>
                    <xsl:attribute name="align">left</xsl:attribute>
                    <xsl:text>Referring General Practitioner:</xsl:text>
                  </xsl:element>
                  <!--  </th>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID;</xsl:attribute>
                    <xsl:text>Name:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="class">authorName</xsl:attribute>                    
                    <xsl:attribute name="style">border-top: 1px SOLID;</xsl:attribute>
                    <xsl:value-of select="$authorName"/>
                    <xsl:if test="$authorHpii!=''">
                      <xsl:element name="br"/>
                      <xsl:element name="div">
                        <xsl:attribute name="class">
                          <xsl:value-of select="$PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS"/>
                        </xsl:attribute>
                        <xsl:value-of select="$authorHpii"/>
                      </xsl:element>
                    </xsl:if>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:if test="$authorOrganization!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                      <xsl:text>Facility:</xsl:text>
                    </xsl:element>
                    <!--  </td>  -->
                    <xsl:element name="td">
                      <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                      <xsl:value-of select="$authorOrganization"/>
                      <xsl:if test="$authorHpio!=''">
                        <xsl:element name="br"/>
                        <xsl:element name="div">
                          <xsl:attribute name="class">
                            <xsl:value-of select="$PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS"/>
                          </xsl:attribute>
                          <xsl:value-of select="$authorHpio"/>
                        </xsl:element>
                      </xsl:if>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!--  </tr>  -->
                </xsl:if>
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Address:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="substring-after($authorAddress, ':')"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Phone:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$authorPhoneNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Fax:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$authorFaxNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Email:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$authorEmail"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEE;</xsl:attribute>
                    <xsl:text>Provider No:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFsidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$GPProviderNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
              </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>

    <!-- Service Requested -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFull</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block04</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">VSRFSectionL2</xsl:attribute>
            <xsl:text>Service requested</xsl:text>
          </xsl:element>
          <!--  </th>  -->
        </xsl:element>
        <!--  </tr>  -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:element name="table">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:attribute name="width">100%</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:text>Priority:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="class">RD_Priority</xsl:attribute>
                    <xsl:value-of select="$RD_Priority"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:text>Service Requested:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="class">RD_ServiceRequested</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:value-of select="$RD_ServiceRequested"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:text>Outpatient Clinic Specialty:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="class">RD_OutpatientClinicSpecialty</xsl:attribute>                    
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:value-of select="$RD_OutpatientClinicSpecialty"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:text>GP Review Date:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:value-of select="$AO_GPReviewDate"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
              </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>

    <!-- Reason for patient referral -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFull</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block05</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">VSRFSectionL2</xsl:attribute>
            <xsl:text>Reason for patient referral</xsl:text>
          </xsl:element>
          <!--  </th>  -->
        </xsl:element>
        <!--  </tr>  -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:element name="table">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:attribute name="width">100%</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:text>Referral Reason:</xsl:text>
                  </xsl:element>
                  <xsl:element name="td">
                    <xsl:attribute name="colspan">2</xsl:attribute>
                    <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                    <xsl:attribute name="class">Narr_Ref_Det</xsl:attribute>
                    <xsl:value-of select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Ref_Det]/cda:text/cda:table/cda:tbody/cda:tr/cda:td"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevaluenames</xsl:attribute>
                    <xsl:text>Referral Length:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFWidevalue</xsl:attribute>
                    <xsl:attribute name="class">RD_ReferralLength</xsl:attribute>                    
                    <xsl:value-of select="$RD_ReferralLength"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!-- </tr>  -->
              </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>

    <!-- Other notes (eg: current services) -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFull</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block06</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">VSRFSectionL2</xsl:attribute>
            <xsl:text>Other notes (eg: current services)</xsl:text>
          </xsl:element>
          <!--  </th>  -->
        </xsl:element>
        <!--  </tr>  -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:element name="table">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:attribute name="width">100%</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:if test="$RD_OtherNotes!=''">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:attribute name="colspan">3</xsl:attribute>
                      <xsl:attribute name="class">RD_OtherNotes</xsl:attribute>
                      <xsl:value-of select="$RD_OtherNotes"/>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                      <xsl:text></xsl:text>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                </xsl:if>
                <xsl:if test="count(cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and ((cda:associatedEntity/cda:associatedPerson/cda:name!='') or (cda:associatedEntity/cda:associatedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name!=''))]) &gt; 0">
                  <xsl:element name="tr">
                    <xsl:element name="td">
                      <xsl:call-template name="getParticipantsTable">
                        <xsl:with-param name="title">NOMINATED PRIMARY HEALTHCARE PROVIDER PERSON</xsl:with-param>
                        <xsl:with-param name="tableId">VSRF_NOMINATED_PRIMARY_HEALTHCARE_PROVIDER_PARTICIPANTS_TABLE</xsl:with-param>
                        <xsl:with-param name="participants" select="cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and cda:associatedEntity/cda:associatedPerson]" />
                      </xsl:call-template>
                    </xsl:element>
                    <!--  </td>  -->
                  </xsl:element>
                  <!-- </tr>  -->
                </xsl:if>
                <xsl:element name="tr">
                  <xsl:attribute name="valign">top</xsl:attribute>
                  <xsl:element name="td">
                    <xsl:element name="table">
                      <xsl:attribute name="class">vsrfHalf</xsl:attribute>
                      <xsl:attribute name="cellspacing">0</xsl:attribute>
                      <xsl:attribute name="cellpadding">0</xsl:attribute>
                      <xsl:attribute name="summary">VSRF Block06B</xsl:attribute>
                      <xsl:element name="tbody">
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:text>Interpreter required:</xsl:text>
                          </xsl:element>
                          <!--  </td>  -->
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevalue AO_InterpreterRequired</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:call-template name="blankWhenEmpty">
                              <xsl:with-param name="data">
                                <xsl:value-of select="$AO_InterpreterRequired"/>
                              </xsl:with-param>
                            </xsl:call-template>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!-- </tr>  -->
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:text>Preferred language:</xsl:text>
                          </xsl:element>
                          <!--  </td>  -->
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevalue AO_PreferredLanguage</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:call-template name="blankWhenEmpty">
                              <xsl:with-param name="data">
                                <xsl:value-of select="$AO_PreferredLanguage"/>
                              </xsl:with-param>
                            </xsl:call-template>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!-- </tr>  -->
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:text>Pension:</xsl:text>
                          </xsl:element>
                          <!--  </td>  -->
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevalue AO_Pension</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:call-template name="blankWhenEmpty">
                              <xsl:with-param name="data">
                                <xsl:value-of select="$AO_Pension"/>
                              </xsl:with-param>
                            </xsl:call-template>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!-- </tr>  -->
                        <xsl:if test="$AO_PensionCardNumber!=''">
                          <xsl:element name="tr">
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                              <xsl:element name="div">
                                <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                                <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                                <xsl:text>Card Number, Expiry:</xsl:text>
                              </xsl:element>
                            </xsl:element>
                            <!--  </td>  -->
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevalue AO_PensionCardNumber</xsl:attribute>
                              <xsl:value-of select="$AO_PensionCardNumber"/>
                            </xsl:element>
                            <!--  </td>  -->
                          </xsl:element>
                          <!-- </tr>  -->
                        </xsl:if>
                        <xsl:if test="$AO_SafetyNetNumber!=''">
                          <xsl:element name="tr">
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                              <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                              <xsl:text>Safety Net No:</xsl:text>
                            </xsl:element>
                            <!--  </td>  -->
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevalue AO_SafetyNetNumber</xsl:attribute>
                              <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                              <xsl:value-of select="$AO_SafetyNetNumber"/>
                            </xsl:element>
                            <!--  </td>  -->
                          </xsl:element>
                          <!-- </tr>  -->
                        </xsl:if>
                        <xsl:if test="$AO_WorkCover!=''">
                          <xsl:element name="tr">
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                              <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                              <xsl:text>Work cover:</xsl:text>
                            </xsl:element>
                            <!--  </td>  -->
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevalue AO_WorkCover</xsl:attribute>
                              <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                              <xsl:value-of select="$AO_WorkCover"/>
                            </xsl:element>
                            <!--  </td>  -->
                          </xsl:element>
                          <!-- </tr>  -->
                          <xsl:if test="$AO_WorkCoverClaimNumber!=''">
                            <xsl:element name="tr">
                              <xsl:element name="td">
                                <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                                <xsl:element name="div">
                                  <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                                  <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                                  <xsl:text>Claim Number:</xsl:text>
                                </xsl:element>
                              </xsl:element>
                              <!--  </td>  -->
                              <xsl:element name="td">
                                <xsl:attribute name="class">VSRFWidesidevalue AO_WorkCoverClaimNumber</xsl:attribute>
                                <xsl:value-of select="$AO_WorkCoverClaimNumber"/>
                              </xsl:element>
                              <!--  </td>  -->
                            </xsl:element>
                            <!-- </tr>  -->
                          </xsl:if>
                        </xsl:if>
                      </xsl:element>
                      <!--  </tbody>  -->
                    </xsl:element>
                    <!--  </table>  -->
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:text></xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="align">right</xsl:attribute>
                    <xsl:element name="table">
                      <xsl:attribute name="class">vsrfHalf</xsl:attribute>
                      <xsl:attribute name="cellspacing">0</xsl:attribute>
                      <xsl:attribute name="cellpadding">0</xsl:attribute>
                      <xsl:attribute name="summary">VSRF Block06C</xsl:attribute>
                      <xsl:element name="tbody">
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:text>DVA Card Number, Expiry:</xsl:text>
                          </xsl:element>
                          <!--  </td>  -->
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevalue AO_DVACardNumberAndExpiry</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:call-template name="blankWhenEmpty">
                              <xsl:with-param name="data">
                                <xsl:value-of select="$AO_DVACardNumberAndExpiry"/>
                              </xsl:with-param>
                            </xsl:call-template>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!-- </tr>  -->
                        <xsl:if test="$AO_DVACardType!=''">
                          <xsl:element name="tr">
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                              <xsl:element name="div">
                                <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                                <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                                <xsl:text>Card Type:</xsl:text>
                              </xsl:element>
                            </xsl:element>
                            <!--  </td>  -->
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevalue AO_DVACardType</xsl:attribute>
                              <xsl:value-of select="$AO_DVACardType"/>
                            </xsl:element>
                            <!--  </td>  -->
                          </xsl:element>
                          <!-- </tr>  -->
                        </xsl:if>
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:text>Health Fund:</xsl:text>
                          </xsl:element>
                          <!--  </td>  -->
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevalue AO_HealthFundName</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:call-template name="blankWhenEmpty">
                              <xsl:with-param name="data">
                                <xsl:value-of select="$AO_HealthFundName"/>
                              </xsl:with-param>
                            </xsl:call-template>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!-- </tr>  -->
                        <xsl:if test="$AO_HealthFundNumberAndExpiry!=''">
                          <xsl:element name="tr">
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                              <xsl:element name="div">
                                <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                                <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                                <xsl:text>Number, Expiry:</xsl:text>
                              </xsl:element>
                            </xsl:element>
                            <!--  </td>  -->
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevalue AO_HealthFundNumberAndExpiry</xsl:attribute>
                              <xsl:value-of select="$AO_HealthFundNumberAndExpiry"/>
                            </xsl:element>
                            <!--  </td>  -->
                          </xsl:element>
                          <!-- </tr>  -->
                        </xsl:if>
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:text>Medicare Number, Expiry:</xsl:text>
                          </xsl:element>
                          <!--  </td>  -->
                          <xsl:element name="td">
                            <xsl:attribute name="class">VSRFWidesidevalue AO_MedicareNumberAndExpiry</xsl:attribute>
                            <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                            <xsl:call-template name="blankWhenEmpty">
                              <xsl:with-param name="data">
                                <xsl:value-of select="$MedicareNumberAndExpiry"/>
                              </xsl:with-param>
                            </xsl:call-template>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!-- </tr>  -->
                        <xsl:if test="$AO_TransportAccidentCommission!=''">
                          <xsl:element name="tr">
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                              <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                              <xsl:text>TAC:</xsl:text>
                            </xsl:element>
                            <!--  </td>  -->
                            <xsl:element name="td">
                              <xsl:attribute name="class">VSRFWidesidevalue AO_TransportAccidentCommission</xsl:attribute>
                              <xsl:attribute name="style">border-top: 1px SOLID #EEEEEE;</xsl:attribute>
                              <xsl:value-of select="$AO_TransportAccidentCommission"/>
                            </xsl:element>
                            <!--  </td>  -->
                          </xsl:element>
                          <!-- </tr>  -->
                          <xsl:if test="$AO_TACNumber!=''">
                            <xsl:element name="tr">
                              <xsl:element name="td">
                                <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                                <xsl:element name="div">
                                  <xsl:attribute name="class">VSRFWidesidevaluenames</xsl:attribute>
                                  <xsl:attribute name="style">margin-left: 20px;</xsl:attribute>
                                  <xsl:text>Claim Number:</xsl:text>
                                </xsl:element>
                              </xsl:element>
                              <!--  </td>  -->
                              <xsl:element name="td">
                                <xsl:attribute name="class">VSRFWidesidevalue AO_TACNumber</xsl:attribute>
                                <xsl:value-of select="$AO_TACNumber"/>
                              </xsl:element>
                              <!--  </td>  -->
                            </xsl:element>
                            <!-- </tr>  -->
                          </xsl:if>
                        </xsl:if>
                      </xsl:element>
                      <!--  </tbody>  -->
                    </xsl:element>
                    <!--  </table>  -->
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:attribute name="valign">top</xsl:attribute>
                  <xsl:element name="td">
                    <xsl:element name="b">
                      <xsl:text>Consent to referral and sharing of relevant information:</xsl:text>
                    </xsl:element>
                    <xsl:text></xsl:text>
                    <xsl:value-of select="$AO_ConsentToReferral"/>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>

    <!-- Clinical Information -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFull</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block07</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">VSRFSectionA</xsl:attribute>
            <xsl:text>Clinical Information</xsl:text>
          </xsl:element>
          <!--  </th>  -->
        </xsl:element>
        <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Warnings / Alerts:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>              
              <xsl:value-of select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table/cda:tbody/cda:tr[translate(normalize-space(cda:td),$uc,$lc)='warnings']/cda:td[2]"/>
              <xsl:element name="br"/>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
		  <xsl:element name="tr">
			  <xsl:element name="td">
				  <xsl:attribute name="class">VSRFBox</xsl:attribute>
				  <xsl:element name="div">
					  <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
					  <xsl:text>Progress Notes:</xsl:text>
				  </xsl:element>
				  <xsl:element name="br"/>
				  <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adm_Obs]/cda:text/cda:table[cda:caption='Progress Note']"/>
			  </xsl:element>
			  <!--  </td>  -->
		  </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">horizontalspacer</xsl:attribute>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Allergies / Adverse Reactions:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Adv_React]/cda:text"/>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">horizontalspacer</xsl:attribute>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Current Medications:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Meds]/cda:text"/>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">horizontalspacer</xsl:attribute>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox Narr_Soc_Hist</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Social History:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Soc_Hist]/cda:text"/>
            </xsl:element>
            <!--  </td>  -->
            <xsl:element name="tr">
              <xsl:element name="td">
                <xsl:attribute name="class">horizontalspacer</xsl:attribute>
              </xsl:element>
              <!--  </td>  -->
            </xsl:element>
            <!--  </tr>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Lifestyle Factors:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Life_Fac]/cda:text"/>
            </xsl:element>
            <!--  </td>  -->
            <xsl:element name="tr">
              <xsl:element name="td">
                <xsl:attribute name="class">horizontalspacer</xsl:attribute>
              </xsl:element>
              <!--  </td>  -->
            </xsl:element>
            <!--  </tr>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Family History:</xsl:text>
              </xsl:element>

              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Fam_Hist]/cda:text"/>

            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">horizontalspacer</xsl:attribute>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox medicalHistorySection</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Medical History:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Med_Hist]/cda:text"/>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">horizontalspacer</xsl:attribute>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Observations:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Obs]/cda:text"/>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">horizontalspacer</xsl:attribute>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Immunisations:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Imm]/cda:text"/>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">horizontalspacer</xsl:attribute>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">VSRFBox</xsl:attribute>
              <xsl:element name="div">
                <xsl:attribute name="class">VSRFSectionL2A</xsl:attribute>
                <xsl:text>Investigations, Test Results &amp; Attachments:</xsl:text>
              </xsl:element>
              <xsl:element name="br"/>
              <xsl:apply-templates select="/cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section[cda:title=$Narr_Investigations]/cda:component/cda:section/cda:text"/>
            </xsl:element>
            <!--  </td>  -->
          </xsl:element>
          <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>

    <!-- Referral Acknowledgement -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFull</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block08</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">VSRFSectionA</xsl:attribute>
            <xsl:text>Referral Acknowledgement</xsl:text>
          </xsl:element>
          <!--  </th>  -->
        </xsl:element>
        <!--  </tr>  -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">VSRFBox</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="class">VSRFgenerictableNotFixed</xsl:attribute>
              <xsl:attribute name="cellspacing">0</xsl:attribute>
              <xsl:attribute name="cellpadding">0</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:attribute name="valign">top</xsl:attribute>
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="colspan">5</xsl:attribute>
                    <xsl:element name="input">
                      <xsl:attribute name="type">checkbox</xsl:attribute>
                    </xsl:element>
                    <xsl:text>To acknowledge a referral you have received, complete this section</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:attribute name="valign">top</xsl:attribute>
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottomRight</xsl:attribute>
                    <xsl:attribute name="rowspan">3</xsl:attribute>
                    <xsl:attribute name="width">10%</xsl:attribute>
                    <xsl:element name="b">
                      <xsl:text>From:</xsl:text>
                    </xsl:element>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Name:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottomRight</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$recipientName"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Position:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:text></xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Organisation:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottomRight</xsl:attribute>
                    <xsl:attribute name="class">recipientOrganization</xsl:attribute>                    
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$recipientOrganization"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Phone:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$recipientPhoneNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Email:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottomRight</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$recipientEmail"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Fax:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$recipientFaxNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:attribute name="valign">top</xsl:attribute>
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottomRight</xsl:attribute>
                    <xsl:attribute name="rowspan">3</xsl:attribute>
                    <xsl:attribute name="width">10%</xsl:attribute>
                    <xsl:element name="b">
                      <xsl:text>To:</xsl:text>
                    </xsl:element>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Name:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottomRight</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$authorName"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Position:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:text></xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Organisation:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottomRight</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$authorOrganization"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Phone:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$authorPhoneNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Email:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottomRight</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$authorEmail"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">15%</xsl:attribute>
                    <xsl:text>Fax:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="width">30%</xsl:attribute>
                    <xsl:call-template name="blankWhenEmpty">
                      <xsl:with-param name="data">
                        <xsl:value-of select="$authorFaxNumber"/>
                      </xsl:with-param>
                    </xsl:call-template>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFBottom</xsl:attribute>
                    <xsl:attribute name="colspan">5</xsl:attribute>
                    <xsl:element name="table">
                      <xsl:attribute name="cellspacing">0</xsl:attribute>
                      <xsl:attribute name="cellpadding">0</xsl:attribute>
                      <xsl:element name="tbody">
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:text>Date referral received:</xsl:text>
                            <xsl:element name="span">
                              <xsl:attribute name="style">margin-left: 50px;</xsl:attribute>
                              <xsl:text>/</xsl:text>
                            </xsl:element>
                            <xsl:element name="span">
                              <xsl:attribute name="style">margin-left: 30px;</xsl:attribute>
                              <xsl:text>/</xsl:text>
                            </xsl:element>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!--  </tr>  -->
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:text>Status of referral: </xsl:text>
                            <xsl:element name="input">
                              <xsl:attribute name="type">checkbox</xsl:attribute>
                            </xsl:element>
                            <xsl:text>Accepted</xsl:text>
                            <xsl:element name="input">
                              <xsl:attribute name="type">checkbox</xsl:attribute>
                            </xsl:element>
                            <xsl:text>Wait listed</xsl:text>
                            <xsl:element name="input">
                              <xsl:attribute name="type">checkbox</xsl:attribute>
                            </xsl:element>
                            <xsl:text>Rejected (note reason and suggested alternatives)</xsl:text>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!--  </tr>  -->
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:text>Estimated date of assessment:</xsl:text>
                            <xsl:element name="span">
                              <xsl:attribute name="style">margin-left: 50px;</xsl:attribute>
                              <xsl:text>/</xsl:text>
                            </xsl:element>
                            <xsl:element name="span">
                              <xsl:attribute name="style">margin-left: 30px;</xsl:attribute>
                              <xsl:text>/</xsl:text>
                            </xsl:element>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!--  </tr>  -->
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:text>Contact person for further information: </xsl:text>
                            <xsl:element name="input">
                              <xsl:attribute name="type">checkbox</xsl:attribute>
                            </xsl:element>
                            <xsl:text>As above (From details)</xsl:text>
                            <xsl:element name="input">
                              <xsl:attribute name="type">checkbox</xsl:attribute>
                            </xsl:element>
                            <xsl:text>New contact (Provide in notes)</xsl:text>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!--  </tr>  -->
                        <xsl:element name="tr">
                          <xsl:element name="td">
                            <xsl:text>I am willing to be contacted regarding participating in a Team Care Arrangement.</xsl:text>
                            <xsl:element name="input">
                              <xsl:attribute name="type">checkbox</xsl:attribute>
                            </xsl:element>
                          </xsl:element>
                          <!--  </td>  -->
                        </xsl:element>
                        <!--  </tr>  -->
                      </xsl:element>
                      <!--  </tbody>  -->
                    </xsl:element>
                    <!--  </table>  -->
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
                <xsl:element name="tr">
                  <xsl:attribute name="valign">top</xsl:attribute>
                  <xsl:element name="td">
                    <xsl:attribute name="class">VSRFNotesHeight</xsl:attribute>
                    <xsl:attribute name="colspan">5</xsl:attribute>
                    <xsl:text>Notes:</xsl:text>
                  </xsl:element>
                  <!--  </td>  -->
                </xsl:element>
                <!--  </tr>  -->
              </xsl:element>
              <!--  </tbody>  -->
            </xsl:element>
            <!--  </table>  -->
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>

    <!-- Document Details -->
    <xsl:element name="table">
      <xsl:attribute name="class">vsrfFullBox</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">VSRF Block09</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:element name="b">
              <xsl:text>Document ID:</xsl:text>
            </xsl:element>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:value-of select="$documentId"/>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:element name="b">
              <xsl:text>Creation Date/Time:</xsl:text>
            </xsl:element>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:value-of select="$dateCompleted"/>
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:element name="b">
              <xsl:text>Document Version:</xsl:text>
            </xsl:element>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:value-of select="$documentVersion"/>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:element name="b">
              <xsl:text>Date/Time Attested:</xsl:text>
            </xsl:element>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:value-of select="$dateTimeAttested"/>
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:element name="b">
              <xsl:text>Completion Code:</xsl:text>
            </xsl:element>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:value-of select="$completionCode"/>
          </xsl:element>
          <!--  </td>  -->
          <xsl:element name="td">
            <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:text></xsl:text>
          </xsl:element>
          <!--  </td>  -->
        </xsl:element>
        <!--  </tr>  -->
      </xsl:element>
      <!--  </tbody>  -->
    </xsl:element>
    <!--  </table>  -->
  </xsl:template>

  <xsl:template name="blankWhenEmpty">
    <xsl:param name="data"/>
    <xsl:choose>
      <xsl:when test="$data!=''">
        <xsl:value-of select="$data"/>
      </xsl:when>
      <xsl:otherwise></xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] VSRF TEMPLATES -->




  <!-- BANNER TEMPLATES -->
  <!--================================================================================================================================================================================-->

  <xsl:template name="getBannerTable">
    <xsl:element name="table">
      <xsl:attribute name="class">pageWidth</xsl:attribute>
      <xsl:attribute name="style">
        border: 1px SOLID #000000;
        table-layout: fixed;
        word-wrap: break-word;
        margin-bottom: <xsl:value-of select="$TOP_MARGIN_WIDTH"/>px;
      </xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">top banner panel</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="align">center</xsl:attribute>
            <xsl:attribute name="style">
              background: #EEEEEE;
              color: #000000;
              font-size: 16px;
              padding: 2px;
              font-weight: bold;
            </xsl:attribute>
            <xsl:value-of select="$cdaDocumentTitle"/>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="align">left</xsl:attribute>
            <xsl:attribute name="style">
              background: #EEEEEE;
              color: #000000;
              font-size: 13px;
              padding: 2px;
              word-wrap: break-word;
              font-weight: bold;
            </xsl:attribute>
            PATIENT: <xsl:value-of select="$patientName"/>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number" select="6" />
            </xsl:call-template>
            SEX: <xsl:value-of select="$patientSex"/>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number" select="6" />
            </xsl:call-template>
            DOB: <xsl:value-of select="$patientDateOfBirth"/>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number" select="6" />
            </xsl:call-template>
            AGE: <xsl:value-of select="$patientAge"/>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number" select="6" />
            </xsl:call-template>
            <xsl:if test="$patientIHI!=''">
              IHI: <xsl:value-of select="$patientIHI"/>
              <xsl:call-template name="printNBSPs">
                <xsl:with-param name="number" select="6" />
              </xsl:call-template>
            </xsl:if>
            <xsl:if test="string-length($patientMRN) &gt; 0">
              MRN: <xsl:value-of select="$patientMRN"/>
            </xsl:if>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:attribute name="class">showHideHeaderDetailsButtonTableRow</xsl:attribute>
          <xsl:element name="td">
            <xsl:attribute name="align">left</xsl:attribute>
            <xsl:attribute name="style">
              background: #EEEEEE;
              color: #000000;
              font-size: 13px;
              padding: 2px;
              border-top: 1px SOLID #000000;
              font-weight: bold;
            </xsl:attribute>
            <xsl:element name="input">
              <xsl:attribute name="type">checkbox</xsl:attribute>
              <xsl:attribute name="name">administrativeDetailsCheckbox</xsl:attribute>
              <xsl:attribute name="id">administrativeDetailsCheckbox</xsl:attribute>
              <xsl:attribute name="checked">checked</xsl:attribute>
              <xsl:attribute name="onclick">
                toggleDetails('<xsl:value-of select="$DETAILS_DIV_ID"/>');
              </xsl:attribute>
            </xsl:element><!-- </input> -->
            Administrative Details
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number">6</xsl:with-param>
            </xsl:call-template>
            <xsl:element name="div">
              <xsl:attribute name="id">providerIdentifiersCheckboxDiv</xsl:attribute>
              <xsl:attribute name="style">display: inline;</xsl:attribute>
              <xsl:element name="input">
                <xsl:attribute name="type">checkbox</xsl:attribute>
                <xsl:attribute name="name">providerIdentifiersCheckbox</xsl:attribute>
                <xsl:attribute name="id">providerIdentifiersCheckbox</xsl:attribute>
                <xsl:attribute name="checked">checked</xsl:attribute>
                <xsl:attribute name="onclick">
                  toggleProviderIdentifiers('<xsl:value-of select="$PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS"/>','<xsl:value-of select="$PROVIDER_ORGANISATION_IDENTIFIER_CSS_CLASS"/>');
                </xsl:attribute>
              </xsl:element><!-- </input> -->
              Provider Identifiers
            </xsl:element><!-- </div> -->
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <!-- Display Incompatibility Warning (if necessary) -->
        <xsl:if test="$isStylesheetCompatibleWithRequiredRenderingSpecificationVersion='false'">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="align">center</xsl:attribute>
              <xsl:attribute name="style">
                background: #EEEEEE;
                color: #000000;
                border-top: 1px SOLID #000000;
                font-size: 12px;
                padding: 2px;
                font-weight: bold;
              </xsl:attribute>
              <xsl:element name="b">
                <xsl:value-of select="$CDA_RENDERING_SPECIFICATION_INCOMPATIBILITY_WARNING"/>
              </xsl:element>
            </xsl:element>
            <!-- </td> -->
          </xsl:element>
          <!-- </tr> -->
        </xsl:if>
      </xsl:element>
      <!-- </tbody> -->
    </xsl:element>
    <!-- </table> -->
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] BANNER TEMPLATES -->



  <!-- DETAILS TEMPLATES -->
  <!--================================================================================================================================================================================-->

  <xsl:template name="getDetailsTable">
    <xsl:element name="table">
      <xsl:attribute name="class">pageWidth</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">document general</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="valign">top</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="summary">Patient / Facility / Encompassing Encounter details</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="valign">top</xsl:attribute>
                    <xsl:call-template name="getPatientDetailsTable"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
                <xsl:call-template name="getEncounterDetails"/>
                <xsl:call-template name="getFacilityDetailsTableRow"/>
                <xsl:call-template name="getResponsibleHealthProfessionalAtTimeOfDischargeRow"/>
                <xsl:call-template name="getNominatedPrimaryHealthcareProviderOrganisationRow"/>
              </xsl:element>
              <!-- </tbody> -->
            </xsl:element>
            <!-- </table> -->
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="valign">top</xsl:attribute>
            <xsl:element name="table">
              <xsl:attribute name="summary">Main Title</xsl:attribute>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="valign">top</xsl:attribute>
                    <xsl:call-template name="getMainTitle"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="valign">top</xsl:attribute>
                    <xsl:call-template name="getDocumentMetadataTable"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="valign">top</xsl:attribute>
                    <xsl:call-template name="getDocumentAuthorDetailsTable"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:element>
              <!-- </tbody> -->
            </xsl:element>
            <!-- </table> -->
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
      </xsl:element>
      <!-- </tbody> -->
    </xsl:element>
    <!-- </table> -->

    <xsl:call-template name="getHorizontalSpacer"/>

    <xsl:if test="count(./cda:informationRecipient[@typeCode='PRCP' or not(@typeCode)]/cda:intendedRecipient) &gt; 0">
      <xsl:call-template name="getRecipientsTable">
        <xsl:with-param name="title">PRIMARY RECIPIENTS</xsl:with-param>
        <xsl:with-param name="tableId">PRIMARY_RECIPIENTS_TABLE</xsl:with-param>
        <xsl:with-param name="recipients" select="./cda:informationRecipient[@typeCode='PRCP' or not(@typeCode)]/cda:intendedRecipient" />
      </xsl:call-template>
      <xsl:call-template name="getHorizontalSpacer"/>
    </xsl:if>

    <xsl:if test="count(./cda:informationRecipient[@typeCode='TRC']/cda:intendedRecipient) &gt; 0">
      <xsl:call-template name="getRecipientsTable">
        <xsl:with-param name="title">SECONDARY RECIPIENTS</xsl:with-param>
        <xsl:with-param name="tableId">SECONDARY_RECIPIENTS_TABLE</xsl:with-param>
        <xsl:with-param name="recipients" select="./cda:informationRecipient[@typeCode='TRC']/cda:intendedRecipient" />
      </xsl:call-template>
      <xsl:call-template name="getHorizontalSpacer"/>
    </xsl:if>

    <xsl:if test="count(./cda:participant[@typeCode='PART' and cda:functionCode/@code!='PCP']) &gt; 0">
      <xsl:call-template name="getParticipantsTable">
        <xsl:with-param name="title">PARTICIPANTS</xsl:with-param>
        <xsl:with-param name="tableId">PARTICIPANTS_TABLE</xsl:with-param>
        <xsl:with-param name="participants" select="./cda:participant[@typeCode='PART' and cda:functionCode/@code!='PCP']" />
      </xsl:call-template>
      <xsl:call-template name="getHorizontalSpacer"/>
    </xsl:if>

    <xsl:if test="count(./cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP']) &gt; 0">
      <xsl:call-template name="getParticipantsTable">
        <xsl:with-param name="title">NOMINATED PRIMARY HEALTHCARE PROVIDER PERSON</xsl:with-param>
        <xsl:with-param name="tableId">NOMINATED_PRIMARY_HEALTHCARE_PROVIDER_PARTICIPANTS_TABLE</xsl:with-param>
        <xsl:with-param name="participants" select="./cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and cda:associatedEntity/cda:associatedPerson]" />
      </xsl:call-template>
      <xsl:call-template name="getHorizontalSpacer"/>
    </xsl:if>
  </xsl:template>

  <xsl:template name="getMainTitle">
    <xsl:variable name="facilityName">
      <xsl:choose>
        <xsl:when test="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name">
          <xsl:value-of select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name"/>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>

    <xsl:element name="table">
      <xsl:attribute name="class">halfPageWidth</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">Main Title</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:attribute name="class">facility</xsl:attribute>
            <xsl:attribute name="align">center</xsl:attribute>
            <xsl:element name="br"/>
            <xsl:value-of select="$facilityName"/>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:if test="/cda:ClinicalDocument/cda:component/cda:structuredBody//cda:observationMedia[@ID='LOGO']/cda:value[@mediaType='image/png']">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="colspan">2</xsl:attribute>
              <xsl:attribute name="class">facility</xsl:attribute>
              <xsl:attribute name="align">center</xsl:attribute>
              <xsl:call-template name="renderLogo"/>
            </xsl:element>
            <!-- </td> -->
          </xsl:element>
          <!-- </tr> -->
        </xsl:if>
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:element name="br"/>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
      </xsl:element>
      <!-- </tbody> -->
    </xsl:element>
    <!-- </table> -->
  </xsl:template>

  <xsl:template name="getEncounterDetails">
    <xsl:variable name="admissionDate">
      <xsl:if
          test="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:effectiveTime/cda:low/@value!=''">
        <xsl:call-template name="show-time">
          <xsl:with-param name="datetime"
              select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:effectiveTime/cda:low"/>
        </xsl:call-template>
      </xsl:if>
    </xsl:variable>

    <xsl:variable name="dischargeDate">
      <xsl:if
          test="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:effectiveTime/cda:high/@value!=''">
        <xsl:call-template name="show-time">
          <xsl:with-param name="datetime"
              select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:effectiveTime/cda:high"/>
        </xsl:call-template>
      </xsl:if>

    </xsl:variable>

    <xsl:variable name="separationMode" select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:dischargeDispositionCode/@displayName"/>

    <xsl:if test="$admissionDate != '' or
                      $dischargeDate != '' or
                      $separationMode != ''">
      <xsl:element name="tr">
        <xsl:element name="td">
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:element name="table">
            <xsl:attribute name="class">halfPageWidth</xsl:attribute>
            <xsl:attribute name="style">
              table-layout: fixed;
              word-wrap: break-word;
            </xsl:attribute>
            <xsl:attribute name="cellspacing">0</xsl:attribute>
            <xsl:attribute name="cellpadding">0</xsl:attribute>
            <xsl:attribute name="summary">Encounter Details</xsl:attribute>
            <xsl:element name="thead">
              <xsl:element name="tr">
                <xsl:element name="th">
                  <xsl:attribute name="class">halfsectionheader</xsl:attribute>
                  <xsl:attribute name="align">left</xsl:attribute>
                  <xsl:attribute name="colspan">2</xsl:attribute>
                  <xsl:element name="b">ENCOUNTER DETAILS</xsl:element>
                </xsl:element>
                <!-- </th> -->
              </xsl:element>
              <!-- </tr> -->
            </xsl:element>
            <!-- </tbody> -->
            <xsl:element name="tbody">
              <xsl:if test="$admissionDate!=''">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Start Date
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:value-of select="$admissionDate"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="$dischargeDate!=''">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    End Date
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:value-of select="$dischargeDate"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="$separationMode!=''">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Separation Mode
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:value-of select="$separationMode"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>
            </xsl:element>
            <!-- </tbody> -->
          </xsl:element>
          <!-- </table> -->
          <xsl:call-template name="getHalfHorizontalSpacer"/>
        </xsl:element>
      </xsl:element>
    </xsl:if>
  </xsl:template>

  <xsl:template name="getFacilityDetailsTableRow">
    <xsl:if test="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name and
                      string-length(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name) &gt; 0">
      <xsl:element name="tr">
        <xsl:element name="td">
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:element name="table">
            <xsl:attribute name="class">halfPageWidth</xsl:attribute>
            <xsl:attribute name="style">
              table-layout: fixed;
              word-wrap: break-word;
            </xsl:attribute>
            <xsl:attribute name="cellspacing">0</xsl:attribute>
            <xsl:attribute name="cellpadding">0</xsl:attribute>
            <xsl:attribute name="summary">Facility Details</xsl:attribute>
            <xsl:element name="thead">
              <xsl:element name="tr">
                <xsl:element name="th">
                  <xsl:attribute name="class">halfsectionheader</xsl:attribute>
                  <xsl:attribute name="colspan">2</xsl:attribute>
                  <xsl:element name="b">FACILITY DETAILS</xsl:element>
                </xsl:element>
                <!-- </th> -->
              </xsl:element>
              <!-- </tr> -->
            </xsl:element>
            <!-- </thead> -->
            <xsl:element name="tbody">
              <xsl:element name="tr">
                <xsl:element name="td">
                  <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                  Name
                </xsl:element>
                <!-- </td> -->
                <xsl:element name="td">
                  <xsl:attribute name="class">sidevalue</xsl:attribute>
                  <xsl:value-of select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name"/>
                  <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/ext:asEntityIdentifier">
                    <xsl:call-template name="getProviderOrganisationIdentifier">
                      <xsl:with-param name="entityIdentifier" select="."/>
                    </xsl:call-template>
                  </xsl:for-each>
                </xsl:element>
                <!-- </td> -->
              </xsl:element>
              <!-- </tr> -->

              <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:addr) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Address
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:addr">
                      <xsl:call-template name="show-address">
                        <xsl:with-param name="address" select="."/>
                      </xsl:call-template>
                    </xsl:for-each>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Contact
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'tel:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'tel:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Phone:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'fax:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'fax:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Facsimile machine:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'mailto:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'mailto:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Email:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:name and
                                              string-length(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:name) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Department
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:value-of select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/cda:name"/>
                    <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:location/cda:healthCareFacility/cda:serviceProviderOrganization/ext:asEntityIdentifier">
                      <xsl:call-template name="getProviderOrganisationIdentifier">
                        <xsl:with-param name="entityIdentifier" select="."/>
                      </xsl:call-template>
                    </xsl:for-each>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>
            </xsl:element>
            <!-- </tbody> -->
          </xsl:element>
          <!-- </table> -->
          <xsl:call-template name="getHalfHorizontalSpacer"/>
        </xsl:element>
        <!-- </td> -->
      </xsl:element>
      <!-- </tr> -->
    </xsl:if>
  </xsl:template>

  <xsl:template name="getNominatedPrimaryHealthcareProviderOrganisationRow">
    <xsl:if test="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name and
            string-length(/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name) &gt; 0">
      <xsl:element name="tr">
        <xsl:element name="td">
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:element name="table">
            <xsl:attribute name="class">halfPageWidth</xsl:attribute>
            <xsl:attribute name="style">
              table-layout: fixed;
              word-wrap: break-word;
            </xsl:attribute>
            <xsl:attribute name="cellspacing">0</xsl:attribute>
            <xsl:attribute name="cellpadding">0</xsl:attribute>
            <xsl:attribute name="summary">NOMINATED PRIMARY HEALTHCARE PROVIDER ORGANISATION</xsl:attribute>
            <xsl:element name="thead">
              <xsl:element name="tr">
                <xsl:element name="th">
                  <xsl:attribute name="class">halfsectionheader</xsl:attribute>
                  <xsl:attribute name="colspan">2</xsl:attribute>
                  <xsl:element name="b">NOMINATED PRIMARY HEALTHCARE PROVIDER ORGANISATION</xsl:element>
                </xsl:element>
                <!-- </th> -->
              </xsl:element>
              <!-- </tr> -->
            </xsl:element>
            <!-- </thead> -->
            <xsl:element name="tbody">
              <xsl:element name="tr">
                <xsl:element name="td">
                  <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                  Name
                </xsl:element>
                <!-- </td> -->
                <xsl:element name="td">
                  <xsl:attribute name="class">sidevalue</xsl:attribute>
                  <xsl:value-of select="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name"/>
                  <xsl:for-each select="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/ext:asEntityIdentifier">
                    <xsl:call-template name="getProviderOrganisationIdentifier">
                      <xsl:with-param name="entityIdentifier" select="."/>
                    </xsl:call-template>
                  </xsl:for-each>
                </xsl:element>
                <!-- </td> -->
              </xsl:element>
              <!-- </tr> -->

              <xsl:if test="count(/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:addr) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Address
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:for-each select="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:addr">
                      <xsl:call-template name="show-address">
                        <xsl:with-param name="address" select="."/>
                      </xsl:call-template>
                    </xsl:for-each>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="count(/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Contact
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'tel:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'tel:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Phone:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'fax:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'fax:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Facsimile machine:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'mailto:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:telecom[starts-with(@value, 'mailto:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Email:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:name and
                                string-length(/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:name) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Department
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:value-of select="/cda:ClinicalDocument/cda:participant[@typeCode='PART' and cda:functionCode/@code='PCP' and not(cda:associatedEntity/cda:associatedPerson)]/cda:associatedEntity/cda:scopingOrganization/cda:name"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>
            </xsl:element>
            <!-- </tbody> -->
          </xsl:element>
          <!-- </table> -->
          <xsl:call-template name="getHalfHorizontalSpacer"/>
        </xsl:element>
        <!-- </td> -->
      </xsl:element>
      <!-- </tr> -->
    </xsl:if>
  </xsl:template>

  <xsl:template name="getResponsibleHealthProfessionalAtTimeOfDischargeRow">
    <xsl:if test="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:name and
                      string-length(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:name) &gt; 0">
      <xsl:element name="tr">
        <xsl:element name="td">
          <xsl:attribute name="valign">top</xsl:attribute>
          <xsl:element name="table">
            <xsl:attribute name="class">halfPageWidth</xsl:attribute>
            <xsl:attribute name="style">
              table-layout: fixed;
              word-wrap: break-word;
            </xsl:attribute>
            <xsl:attribute name="cellspacing">0</xsl:attribute>
            <xsl:attribute name="cellpadding">0</xsl:attribute>
            <xsl:attribute name="summary">RESPONSIBLE HEALTH PROFESSIONAL AT TIME OF DISCHARGE</xsl:attribute>
            <xsl:element name="thead">
              <xsl:element name="tr">
                <xsl:element name="th">
                  <xsl:attribute name="class">halfsectionheader</xsl:attribute>
                  <xsl:attribute name="colspan">2</xsl:attribute>
                  <xsl:element name="b">RESPONSIBLE HEALTH PROFESSIONAL AT TIME OF DISCHARGE</xsl:element>
                </xsl:element>
                <!-- </th> -->
              </xsl:element>
              <!-- </tr> -->
            </xsl:element>
            <!-- </thead> -->
            <xsl:element name="tbody">
              <xsl:element name="tr">
                <xsl:element name="td">
                  <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                  Name
                </xsl:element>
                <!-- </td> -->
                <xsl:element name="td">
                  <xsl:attribute name="class">sidevalue</xsl:attribute>

                  <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:name">
                    <xsl:if test="position() > 1">
                      <xsl:value-of select="$AKA_STRING"/>
                    </xsl:if>
                    <xsl:call-template name="show-name">
                      <xsl:with-param name="name" select="."/>
                    </xsl:call-template>
                    <xsl:if test="position()!=last()">
                      <xsl:element name="br"/>
                    </xsl:if>
                  </xsl:for-each>
                  <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/ext:asEntityIdentifier">
                    <xsl:call-template name="getProviderIndividualIdentifier">
                      <xsl:with-param name="entityIdentifier" select="."/>
                    </xsl:call-template>
                  </xsl:for-each>
                </xsl:element>
                <!-- </td> -->
              </xsl:element>
              <!-- </tr> -->

              <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:addr) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Address
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:addr">
                      <xsl:call-template name="show-address">
                        <xsl:with-param name="address" select="."/>
                      </xsl:call-template>
                    </xsl:for-each>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:telecom) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Contact
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevalue</xsl:attribute>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:telecom[starts-with(@value, 'tel:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:telecom[starts-with(@value, 'tel:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Phone:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:telecom[starts-with(@value, 'fax:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:telecom[starts-with(@value, 'fax:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Facsimile machine:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                    <xsl:if test="count(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:telecom[starts-with(@value, 'mailto:')]) &gt; 0">
                      <xsl:for-each select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/cda:telecom[starts-with(@value, 'mailto:')]">
                        <xsl:if test="position()=1">
                          <xsl:element name="b">Email:</xsl:element>
                          <xsl:element name="br"/>
                        </xsl:if>
                        <xsl:call-template name="show-telecom">
                          <xsl:with-param name="telecom" select="."/>
                        </xsl:call-template>
                        <xsl:element name="br"/>
                      </xsl:for-each>
                    </xsl:if>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name and
                                string-length(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Organisation
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:value-of select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization/cda:name"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>

              <xsl:if test="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:name and
                                string-length(/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:name) &gt; 0">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                    Department
                  </xsl:element>
                  <!-- </td> -->
                  <xsl:element name="td">
                    <xsl:value-of select="/cda:ClinicalDocument/cda:componentOf/cda:encompassingEncounter/cda:encounterParticipant[@typeCode='DIS']/cda:assignedEntity/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:name"/>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:if>
            </xsl:element>
            <!-- </tbody> -->
          </xsl:element>
          <!-- </table> -->
          <xsl:call-template name="getHalfHorizontalSpacer"/>
        </xsl:element>
        <!-- </td> -->
      </xsl:element>
      <!-- </tr> -->
    </xsl:if>
  </xsl:template>

  <xsl:template name="getPatientDetailsTable">
    <xsl:variable name="deceasedTime">
      <xsl:if test="$patientDeceasedStatus='true' and
                          /cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:deceasedTime and
                          /cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:deceasedTime/@value and
                          string-length(/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:deceasedTime/@value) &gt; 0">
        <xsl:call-template name="show-time">
          <xsl:with-param name="datetime"
              select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:deceasedTime"/>
        </xsl:call-template>
      </xsl:if>
    </xsl:variable>

    <xsl:element name="table">
      <xsl:attribute name="class">halfPageWidth</xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="style">
        table-layout: fixed;
        word-wrap: break-word;
      </xsl:attribute>
      <xsl:attribute name="summary">Patient details</xsl:attribute>
      <xsl:element name="thead">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="colspan">2</xsl:attribute>
            <xsl:attribute name="class">halfsectionheader</xsl:attribute>
            <xsl:attribute name="align">left</xsl:attribute>
            <xsl:element name="strong">PATIENT DETAILS</xsl:element>
          </xsl:element>
          <!-- </th> -->
        </xsl:element>
        <!-- </tr> -->
      </xsl:element>
      <!-- </thead> -->
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">sidevaluenames</xsl:attribute>
            Name
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">sidevalue</xsl:attribute>
            <xsl:for-each select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:name">
              <xsl:if test="position() > 1">
                <xsl:value-of select="$AKA_STRING"/>
              </xsl:if>
              <xsl:call-template name="show-patient-name">
                <xsl:with-param name="name" select="."/>
              </xsl:call-template>
              <xsl:if test="position()!=last()">
                <xsl:element name="br"/>
              </xsl:if>
            </xsl:for-each>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">sidevaluenames</xsl:attribute>
            Sex
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">sidevalue</xsl:attribute>
            <xsl:value-of select="$patientSex"/>
          </xsl:element>
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">sidevaluenames</xsl:attribute>
            Date of Birth
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">sidevalue</xsl:attribute>
            <xsl:value-of select="$patientDateOfBirth"/> (<xsl:value-of select="$patientAge"/>)
          </xsl:element>
        </xsl:element>
        <!-- </tr> -->
        <xsl:if test="$patientDeceasedStatus='true'">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">sidevaluenames</xsl:attribute>
              Status
            </xsl:element>
            <xsl:element name="td">
              <xsl:attribute name="class">sidevalue</xsl:attribute>
              <xsl:element name="b">DECEASED</xsl:element>
            </xsl:element>
          </xsl:element>
          <xsl:if test="string-length($deceasedTime) &gt; 0">
            <xsl:element name="tr">
              <xsl:element name="td">
                <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                Deceased Time
              </xsl:element>
              <xsl:element name="td">
                <xsl:attribute name="class">sidevalue</xsl:attribute>
                <xsl:value-of select="$deceasedTime"/>
              </xsl:element>
            </xsl:element>
            <!-- </tr> -->
          </xsl:if>
        </xsl:if>
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">sidevaluenames</xsl:attribute>
            IHI
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">sidevalue</xsl:attribute>
            <xsl:choose>
              <xsl:when test="$patientIHI and
                                            string-length($patientIHI) &gt; 0">
                <xsl:value-of select="$patientIHI"/>
              </xsl:when>
              <xsl:otherwise>Not Provided</xsl:otherwise>
            </xsl:choose>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:for-each select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/ext:asEntityIdentifier[@classCode='IDENT' and ext:id[@assigningAuthorityName!='IHI']]">
          <xsl:if test="./ext:id and
                                  ./ext:id/@root and
                                   string-length(./ext:id/@root) &gt; 0 and
                                   not(./ext:id/@displable='false') and
                                   ./ext:code and
                                  ./ext:code/@code and
                                  string-length(./ext:code/@code) &gt; 0 and
                                  ./ext:code/@codeSystem='2.16.840.1.113883.12.203'">
            <xsl:variable name="identifier">
              <xsl:choose>
                <xsl:when test="./ext:id/@extension and
                                    string-length(./ext:id/@extension) &gt; 0">
                  <xsl:value-of select="./ext:id/@extension"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:call-template name="substring-after-last-occurance">
                    <xsl:with-param name="string" select="./ext:id/@root"/>
                    <xsl:with-param name="argument">.</xsl:with-param>
                  </xsl:call-template>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="identifierType">
              <xsl:call-template name="getHL7V2Table0203IdentifierCodeDescription">
                <xsl:with-param name="code" select="./ext:code/@code"/>
              </xsl:call-template>
            </xsl:variable>
            <xsl:variable name="identifierAssigningAuthorityName">
              <xsl:if test="./ext:id/@assigningAuthorityName and
                                string-length(./ext:id/@assigningAuthorityName) &gt; 0">
                <xsl:value-of select="./ext:id/@assigningAuthorityName"/>
              </xsl:if>
            </xsl:variable>
            <xsl:element name="tr">
              <xsl:element name="td">
                <xsl:attribute name="class">sidevaluenames</xsl:attribute>
                <xsl:choose>
                  <xsl:when test="position()=1">
                    <xsl:text>Local Identifiers</xsl:text>
                  </xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
              </xsl:element>
              <!-- </td> -->
              <xsl:element name="td">
                <xsl:attribute name="class">sidevalue</xsl:attribute>
                <xsl:value-of select="$identifier"/>
                <xsl:choose>
                  <xsl:when test="$identifierAssigningAuthorityName and
                                        string-length($identifierAssigningAuthorityName) &gt; 0">
                    <xsl:text> (</xsl:text>
                    <xsl:value-of select="$identifierAssigningAuthorityName"/>
                    <xsl:text>)</xsl:text>
                  </xsl:when>
                  <xsl:when test="$identifierType and
                                        string-length($identifierType) &gt; 0">
                    <xsl:text> (</xsl:text>
                    <xsl:value-of select="$identifierType"/>
                    <xsl:text>)</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text> (Local Identifier)</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:element>
              <!-- </td> -->
            </xsl:element>
            <!-- </tr> -->
          </xsl:if>
        </xsl:for-each>
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">sidevaluenames</xsl:attribute>
            Address
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">sidevalue</xsl:attribute>
            <xsl:choose>
              <xsl:when test="count(/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:addr) &gt; 0">
                <xsl:for-each select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:addr">
                  <xsl:call-template name="show-address">
                    <xsl:with-param name="address" select="."/>
                  </xsl:call-template>
                </xsl:for-each>
              </xsl:when>
              <xsl:otherwise>Not Provided</xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:element>
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">sidevaluenames</xsl:attribute>
            Contact
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">sidevalue</xsl:attribute>
            <xsl:choose>
              <xsl:when test="count(/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:telecom[starts-with(@value, 'tel:') or starts-with(@value, 'fax:') or starts-with(@value, 'mailto:')]) &gt; 0">
                <xsl:if test="count(/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:telecom[starts-with(@value, 'tel:')]) &gt; 0">
                  <xsl:for-each select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:telecom[starts-with(@value, 'tel:')]">
                    <xsl:if test="position()=1">
                      <xsl:element name="b">Phone:</xsl:element>
                      <xsl:element name="br"/>
                    </xsl:if>
                    <xsl:call-template name="show-telecom">
                      <xsl:with-param name="telecom" select="."/>
                    </xsl:call-template>
                    <xsl:element name="br"/>
                  </xsl:for-each>
                </xsl:if>

                <xsl:if test="count(/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:telecom[starts-with(@value, 'fax:')]) &gt; 0">
                  <xsl:for-each select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:telecom[starts-with(@value, 'fax:')]">
                    <xsl:if test="position()=1">
                      <xsl:element name="b">Facsimile machine:</xsl:element>
                      <xsl:element name="br"/>
                    </xsl:if>
                    <xsl:call-template name="show-telecom">
                      <xsl:with-param name="telecom" select="."/>
                    </xsl:call-template>
                    <xsl:element name="br"/>
                  </xsl:for-each>
                </xsl:if>

                <xsl:if test="count(/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:telecom[starts-with(@value, 'mailto:')]) &gt; 0">
                  <xsl:for-each select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:telecom[starts-with(@value, 'mailto:')]">
                    <xsl:if test="position()=1">
                      <xsl:element name="b">Email:</xsl:element>
                      <xsl:element name="br"/>
                    </xsl:if>
                    <xsl:call-template name="show-telecom">
                      <xsl:with-param name="telecom" select="."/>
                    </xsl:call-template>
                    <xsl:element name="br"/>
                  </xsl:for-each>
                </xsl:if>
              </xsl:when>
              <xsl:otherwise>Not Provided</xsl:otherwise>
            </xsl:choose>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
      </xsl:element>
      <!-- </tbody> -->
    </xsl:element>
    <!-- </table> -->
    <xsl:call-template name="getHalfHorizontalSpacer"/>
  </xsl:template>

  <xsl:template name="getDocumentMetadataTable">
    <xsl:variable name="documentId">
      <xsl:call-template name="getIdentifierFromII">
        <xsl:with-param name="iiVariable" select="/cda:ClinicalDocument/cda:id"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="documentSetId">
      <xsl:call-template name="getIdentifierFromII">
        <xsl:with-param name="iiVariable" select="/cda:ClinicalDocument/cda:setId"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="documentVersion" select="cda:versionNumber/@value"/>

    <xsl:variable name="completionCode">
      <xsl:if test="/cda:ClinicalDocument/ext:completionCode and
                /cda:ClinicalDocument/ext:completionCode/@codeSystem and
                /cda:ClinicalDocument/ext:completionCode/@codeSystem='1.2.36.1.2001.1001.101.104.20104' and
                /cda:ClinicalDocument/ext:completionCode/@code and
                string-length(/cda:ClinicalDocument/ext:completionCode/@code) &gt; 0">
        <xsl:choose>
          <xsl:when test="/cda:ClinicalDocument/ext:completionCode/@code='F'">Final</xsl:when>
          <xsl:when test="/cda:ClinicalDocument/ext:completionCode/@code='I'">Interim</xsl:when>
          <xsl:when test="/cda:ClinicalDocument/ext:completionCode/@code='W'">Withdrawn</xsl:when>
          <xsl:otherwise/>
        </xsl:choose>
      </xsl:if>
    </xsl:variable>

    <xsl:variable name="creationTime">
      <xsl:call-template name="show-time">
        <xsl:with-param name="datetime" select="cda:effectiveTime"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="dateTimeAttested">
      <xsl:call-template name="show-time">
        <xsl:with-param name="datetime" select="/cda:ClinicalDocument/cda:legalAuthenticator/cda:time"/>
      </xsl:call-template>
    </xsl:variable>

    <xsl:variable name="replacementStatus">
      <xsl:if test="/cda:ClinicalDocument/cda:relatedDocument[@typeCode='RPLC'] and
                /cda:ClinicalDocument/cda:relatedDocument[@typeCode='RPLC']/cda:parentDocument/cda:id and
                /cda:ClinicalDocument/cda:relatedDocument[@typeCode='RPLC']/cda:parentDocument/cda:id/@root and
                string-length(/cda:ClinicalDocument/cda:relatedDocument[@typeCode='RPLC']/cda:parentDocument/cda:id/@root) &gt; 0">
        <xsl:text>Replaces Document ID: </xsl:text>
      </xsl:if>
    </xsl:variable>

    <xsl:element name="table">
      <xsl:attribute name="class">halfPageWidth</xsl:attribute>
      <xsl:attribute name="style">
        table-layout: fixed;
        word-wrap: break-word;
      </xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">Document Metadata</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number">1</xsl:with-param>
            </xsl:call-template>
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">summarydetails</xsl:attribute>
            Document Type
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
            <xsl:choose>
              <xsl:when test="$cdaDocumentType and
                                string-length($cdaDocumentType) &gt; 0">
                <xsl:value-of select="$cdaDocumentType"/>
              </xsl:when>
              <xsl:otherwise>
                Not Provided
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number">1</xsl:with-param>
            </xsl:call-template>
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">summarydetails</xsl:attribute>
            Creation Date/Time
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
            <xsl:choose>
              <xsl:when test="$creationTime and
                                string-length($creationTime) &gt; 0">
                <xsl:value-of select="$creationTime"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>Not Provided</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number">1</xsl:with-param>
            </xsl:call-template>
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">summarydetails</xsl:attribute>
            Date/Time Attested
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
            <xsl:choose>
              <xsl:when test="$dateTimeAttested and
                                string-length($dateTimeAttested) &gt; 0">
                <xsl:value-of select="$dateTimeAttested"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>Not Provided</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number">1</xsl:with-param>
            </xsl:call-template>
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">summarydetails</xsl:attribute>
            Document ID
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
            <xsl:choose>
              <xsl:when test="$documentId and
                                string-length($documentId) &gt; 0">
                <xsl:value-of select="$documentId"/>
              </xsl:when>
              <xsl:otherwise>
                Not Provided
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:if test="$documentSetId and
                              string-length($documentSetId) &gt; 0">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
              <xsl:call-template name="printNBSPs">
                <xsl:with-param name="number">1</xsl:with-param>
              </xsl:call-template>
            </xsl:element>
            <xsl:element name="td">
              <xsl:attribute name="class">summarydetails</xsl:attribute>
              Document Set ID
            </xsl:element>
            <!-- </td> -->
            <xsl:element name="td">
              <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
              <xsl:value-of select="$documentSetId"/>
            </xsl:element>
            <!-- </td> -->
          </xsl:element>
          <!-- </tr> -->
        </xsl:if>
        <xsl:if test="$documentVersion and
                    string-length($documentVersion) &gt; 0">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
              <xsl:call-template name="printNBSPs">
                <xsl:with-param name="number">1</xsl:with-param>
              </xsl:call-template>
            </xsl:element>
            <xsl:element name="td">
              <xsl:attribute name="class">summarydetails</xsl:attribute>
              Document Version
            </xsl:element>
            <!-- </td> -->
            <xsl:element name="td">
              <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
              <xsl:value-of select="$documentVersion"/>
            </xsl:element>
            <!-- </td> -->
          </xsl:element>
          <!-- </tr> -->
        </xsl:if>
        <xsl:if test="$completionCode and
                              string-length($completionCode) &gt; 0">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
              <xsl:call-template name="printNBSPs">
                <xsl:with-param name="number">1</xsl:with-param>
              </xsl:call-template>
            </xsl:element>
            <xsl:element name="td">
              <xsl:attribute name="class">summarydetails</xsl:attribute>
              Completion Code
            </xsl:element>
            <!-- </td> -->
            <xsl:element name="td">
              <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
              <xsl:choose>
                <xsl:when test="$completionCode='Withdrawn'">
                  <xsl:element name="b">WITHDRAWN</xsl:element>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="$completionCode"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:element>
            <!-- </td> -->
          </xsl:element>
          <!-- </tr> -->
        </xsl:if>
        <xsl:if test="starts-with($replacementStatus, 'Replaces Document ID')">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
              <xsl:call-template name="printNBSPs">
                <xsl:with-param name="number">1</xsl:with-param>
              </xsl:call-template>
            </xsl:element>
            <xsl:element name="td">
              <xsl:attribute name="class">summarydetails</xsl:attribute>
              Replacement Status
            </xsl:element>
            <!-- </td> -->
            <xsl:element name="td">
              <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
              <xsl:value-of select="$replacementStatus"/>
              <xsl:element name="br"/>
              <xsl:value-of select="/cda:ClinicalDocument/cda:relatedDocument[@typeCode='RPLC']/cda:parentDocument/cda:id/@root"/>
            </xsl:element>
            <!-- </td> -->
          </xsl:element>
          <!-- </tr> -->
        </xsl:if>
      </xsl:element>
      <!-- </tbody> -->
    </xsl:element>
    <!-- </table> -->
  </xsl:template>

  <xsl:template name="getDocumentAuthorDetailsTable">
    <xsl:element name="table">
      <xsl:attribute name="class">halfPageWidth</xsl:attribute>
      <xsl:attribute name="style">
        table-layout: fixed;
        word-wrap: break-word;
      </xsl:attribute>
      <xsl:attribute name="cellspacing">0</xsl:attribute>
      <xsl:attribute name="cellpadding">0</xsl:attribute>
      <xsl:attribute name="summary">Document Author Details</xsl:attribute>
      <xsl:element name="tbody">
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number">1</xsl:with-param>
            </xsl:call-template>
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">summarydetails</xsl:attribute>
            Author
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
            <xsl:for-each select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/cda:name">
              <xsl:if test="position() > 1">
                <xsl:value-of select="$AKA_STRING"/>
              </xsl:if>
              <xsl:call-template name="show-name">
                <xsl:with-param name="name" select="."/>
              </xsl:call-template>
              <xsl:if test="position()!=last()">
                <xsl:element name="br"/>
              </xsl:if>
            </xsl:for-each>
            <xsl:if test="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:code/@displayName and
                                      string-length(/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:code/@displayName) &gt; 0">
              <xsl:text> (</xsl:text>
              <xsl:value-of select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:code/@displayName"/>
              <xsl:text>)</xsl:text>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:for-each select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEntityIdentifier">
              <xsl:call-template name="getProviderIndividualIdentifier">
                <xsl:with-param name="entityIdentifier" select="."/>
              </xsl:call-template>
            </xsl:for-each>

            <xsl:if test="count(/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:telecom[starts-with(@value, 'tel:')]) &gt; 0">
              <xsl:for-each select="./cda:telecom[starts-with(@value, 'tel:')]">
                <xsl:if test="position()=1">
                  <xsl:element name="b">Phone:</xsl:element>
                  <xsl:element name="br"/>
                </xsl:if>
                <xsl:call-template name="show-telecom">
                  <xsl:with-param name="telecom" select="."/>
                </xsl:call-template>
                <xsl:element name="br"/>
              </xsl:for-each>
            </xsl:if>

            <xsl:if test="count(/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:telecom[starts-with(@value, 'fax:')]) &gt; 0">
              <xsl:for-each select="./cda:telecom[starts-with(@value, 'fax:')]">
                <xsl:if test="position()=1">
                  <xsl:element name="b">Facsimile machine:</xsl:element>
                  <xsl:element name="br"/>
                </xsl:if>
                <xsl:call-template name="show-telecom">
                  <xsl:with-param name="telecom" select="."/>
                </xsl:call-template>
                <xsl:element name="br"/>
              </xsl:for-each>
            </xsl:if>

            <xsl:if test="count(/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:telecom[starts-with(@value, 'mailto:')]) &gt; 0">
              <xsl:for-each select="./cda:telecom[starts-with(@value, 'mailto:')]">
                <xsl:if test="position()=1">
                  <xsl:element name="b">Email:</xsl:element>
                  <xsl:element name="br"/>
                </xsl:if>
                <xsl:call-template name="show-telecom">
                  <xsl:with-param name="telecom" select="."/>
                </xsl:call-template>
                <xsl:element name="br"/>
              </xsl:for-each>
            </xsl:if>

          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number">1</xsl:with-param>
            </xsl:call-template>
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">summarydetails</xsl:attribute>
            Author Organisation
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
            <xsl:choose>
              <xsl:when test="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization">
                <xsl:for-each select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEmployment/ext:employerOrganization">
                  <xsl:if test="string-length(./cda:asOrganizationPartOf/cda:wholeOrganization/cda:name) &gt; 0">
                    <xsl:value-of select="./cda:asOrganizationPartOf/cda:wholeOrganization/cda:name"/>
                    <xsl:element name="br"/>
                  </xsl:if>
                  <xsl:for-each select="./cda:asOrganizationPartOf/cda:wholeOrganization/ext:asEntityIdentifier">
                    <xsl:call-template name="getProviderOrganisationIdentifier">
                      <xsl:with-param name="entityIdentifier" select="."/>
                    </xsl:call-template>
                  </xsl:for-each>
                </xsl:for-each>
              </xsl:when>
              <xsl:otherwise>Not Provided</xsl:otherwise>
            </xsl:choose>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
        <xsl:element name="tr">
          <xsl:element name="td">
            <xsl:attribute name="class">summaryDetailsLeftGap</xsl:attribute>
            <xsl:call-template name="printNBSPs">
              <xsl:with-param name="number">1</xsl:with-param>
            </xsl:call-template>
          </xsl:element>
          <xsl:element name="td">
            <xsl:attribute name="class">summarydetails</xsl:attribute>
            Author Department
          </xsl:element>
          <!-- </td> -->
          <xsl:element name="td">
            <xsl:attribute name="class">documentdetailsvalues</xsl:attribute>
            <xsl:choose>
              <xsl:when test="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEmployment">
                <xsl:for-each select="/cda:ClinicalDocument/cda:author/cda:assignedAuthor/cda:assignedPerson/ext:asEmployment/ext:employerOrganization">
                  <xsl:if test="string-length(./cda:name) &gt; 0">
                    <xsl:value-of select="./cda:name"/>
                    <xsl:element name="br"/>
                  </xsl:if>
                  <xsl:for-each select="./ext:asEntityIdentifier">
                    <xsl:call-template name="getProviderOrganisationIdentifier">
                      <xsl:with-param name="entityIdentifier" select="."/>
                    </xsl:call-template>
                  </xsl:for-each>
                </xsl:for-each>
              </xsl:when>
              <xsl:otherwise>Not Provided</xsl:otherwise>
            </xsl:choose>
          </xsl:element>
          <!-- </td> -->
        </xsl:element>
        <!-- </tr> -->
      </xsl:element>
      <!-- </tbody> -->
    </xsl:element>
    <!-- </table> -->
  </xsl:template>

  <xsl:template name="getRecipientsTable">
    <xsl:param name="recipients"/>
    <xsl:param name="title"/>
    <xsl:param name="tableId"/>
    <xsl:element name="table">
      <xsl:attribute name="id">
        <xsl:value-of select="$tableId"/>
      </xsl:attribute>
      <xsl:attribute name="class">RECIPIENTS_TABLE_CLASS</xsl:attribute>
      <xsl:attribute name="style">
        table-layout: fixed;
        word-wrap: break-word;
      </xsl:attribute>
      <xsl:element name="colgroup">
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH + 10"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH - 10"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
      </xsl:element>
      <xsl:element name="thead">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">sectionheader</xsl:attribute>
            <xsl:attribute name="colspan">5</xsl:attribute>
            <xsl:element name="b">
              <xsl:value-of select="$title"/>
            </xsl:element>
          </xsl:element>
          <!-- </th> -->
        </xsl:element>
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS</xsl:attribute>
            Name
          </xsl:element>
          <!-- </th> -->
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS</xsl:attribute>
            Occupation/Qualifications
          </xsl:element>
          <!-- </th> -->
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS</xsl:attribute>
            Organisation
          </xsl:element>
          <!-- </th> -->
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS</xsl:attribute>
            Address
          </xsl:element>
          <!-- </th> -->
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_RIGHT_CELL_CLASS</xsl:attribute>
            Contact
          </xsl:element>
          <!-- </th> -->
        </xsl:element>
        <!-- </tr> -->
      </xsl:element>
      <!-- </thead> -->

      <xsl:element name="tbody">
        <xsl:for-each select="$recipients">
          <xsl:call-template name="getRecipientsTableBodyRow"/>
        </xsl:for-each>
      </xsl:element>
      <!-- </tbody> -->
    </xsl:element>
    <!-- </table> -->
  </xsl:template>

  <xsl:template name="getRecipientsTableBodyRow">
    <xsl:variable name="recipientOccupation">
      <xsl:choose>
        <xsl:when test="./cda:informationRecipient/ext:asEmployment/ext:jobCode/@displayName and
                    string-length(./cda:informationRecipient/ext:asEmployment/ext:jobCode/@displayName) &gt; 0">
          <xsl:value-of select="./cda:informationRecipient/ext:asEmployment/ext:jobCode/@displayName"/>
        </xsl:when>
        <xsl:when test="./cda:informationRecipient/ext:asEmployment/ext:jobCode/cda:originalText and
                    string-length(./cda:informationRecipient/ext:asEmployment/ext:jobCode/cda:originalText) &gt; 0">
          <xsl:value-of select="./cda:informationRecipient/ext:asEmployment/ext:jobCode/cda:originalText"/>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="recipientQualifications">
      <xsl:choose>
        <xsl:when test="./cda:informationRecipient/ext:asQualifications/ext:code and
                    string-length(./cda:informationRecipient/ext:asQualifications/ext:code/@displayName) &gt; 0">
          <xsl:value-of select="./cda:informationRecipient/ext:asQualifications/ext:code/@displayName"/>
        </xsl:when>
        <xsl:when test="./cda:informationRecipient/ext:asQualifications/ext:code/cda:originalText and
                    string-length(./cda:informationRecipient/ext:asQualifications/ext:code/cda:originalText) &gt; 0">
          <xsl:value-of select="./cda:informationRecipient/ext:asQualifications/ext:code/cda:originalText"/>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:element name="tr">
      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:for-each select="./cda:informationRecipient/cda:name">
          <xsl:if test="position() > 1">
            <xsl:value-of select="$AKA_STRING"/>
          </xsl:if>
          <xsl:call-template name="show-name">
            <xsl:with-param name="name" select="."/>
          </xsl:call-template>
          <xsl:element name="br"/>
        </xsl:for-each>
        <xsl:for-each select="./cda:informationRecipient/ext:asEntityIdentifier">
          <xsl:call-template name="getProviderIndividualIdentifier">
            <xsl:with-param name="entityIdentifier" select="."/>
          </xsl:call-template>
        </xsl:for-each>
      </xsl:element>
      <!-- </td> -->
      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:choose>
          <xsl:when test="string-length($recipientOccupation) &gt; 0 or
                                    string-length($recipientQualifications) &gt; 0">
            <xsl:if test="string-length($recipientOccupation) &gt; 0">
              <xsl:element name="b">Occupation:</xsl:element>
              <xsl:element name="br"/>
              <xsl:value-of select="$recipientOccupation"/>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:if test="string-length($recipientQualifications) &gt; 0">
              <xsl:element name="b">Qualifications:</xsl:element>
              <xsl:element name="br"/>
              <xsl:value-of select="$recipientQualifications"/>
              <xsl:element name="br"/>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>Not Provided</xsl:otherwise>
        </xsl:choose>
      </xsl:element>
      <!-- </td> -->
      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:for-each select="./cda:receivedOrganization">
          <xsl:for-each select="./cda:name">
            <xsl:if test="string-length(.) &gt; 0">
              <xsl:if test="position() > 1">
                <xsl:value-of select="$AKA_STRING"/>
              </xsl:if>
              <xsl:value-of select="."/>
              <xsl:element name="br"/>
            </xsl:if>
          </xsl:for-each>
          <xsl:for-each select="./ext:asEntityIdentifier">
            <xsl:call-template name="getProviderOrganisationIdentifier">
              <xsl:with-param name="entityIdentifier" select="."/>
            </xsl:call-template>
          </xsl:for-each>
          <xsl:element name="br"/>
        </xsl:for-each>
      </xsl:element>
      <!-- </td> -->

      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:if test="count(./cda:addr) &gt; 0">
          <xsl:for-each select="./cda:addr">
            <xsl:call-template name="show-address">
              <xsl:with-param name="address" select="."/>
            </xsl:call-template>
          </xsl:for-each>
        </xsl:if>
      </xsl:element>
      <!-- </td> -->

      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:if test="count(./cda:telecom[starts-with(@value, 'tel:')]) &gt; 0">
          <xsl:for-each select="./cda:telecom[starts-with(@value, 'tel:')]">
            <xsl:if test="position()=1">
              <xsl:element name="b">Phone:</xsl:element>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:call-template name="show-telecom">
              <xsl:with-param name="telecom" select="."/>
            </xsl:call-template>
            <xsl:element name="br"/>
          </xsl:for-each>
        </xsl:if>

        <xsl:if test="count(./cda:telecom[starts-with(@value, 'fax:')]) &gt; 0">
          <xsl:for-each select="./cda:telecom[starts-with(@value, 'fax:')]">
            <xsl:if test="position()=1">
              <xsl:element name="b">Facsimile machine:</xsl:element>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:call-template name="show-telecom">
              <xsl:with-param name="telecom" select="."/>
            </xsl:call-template>
            <xsl:element name="br"/>
          </xsl:for-each>
        </xsl:if>

        <xsl:if test="count(./cda:telecom[starts-with(@value, 'mailto:')]) &gt; 0">
          <xsl:for-each select="./cda:telecom[starts-with(@value, 'mailto:')]">
            <xsl:if test="position()=1">
              <xsl:element name="b">Email:</xsl:element>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:call-template name="show-telecom">
              <xsl:with-param name="telecom" select="."/>
            </xsl:call-template>
            <xsl:element name="br"/>
          </xsl:for-each>
        </xsl:if>
      </xsl:element>
      <!-- </td> -->
    </xsl:element>
    <!-- </tr> -->
  </xsl:template>

  <xsl:template name="getParticipantsTable">
    <xsl:param name="participants"/>
    <xsl:param name="title"/>
    <xsl:param name="tableId"/>
    <xsl:element name="table">
      <xsl:attribute name="id">
        <xsl:value-of select="$tableId"/>
      </xsl:attribute>
      <xsl:attribute name="class">RECIPIENTS_TABLE_CLASS</xsl:attribute>
      <xsl:attribute name="style">
        table-layout: fixed;
        word-wrap: break-word;
      </xsl:attribute>
      <xsl:element name="colgroup">
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH + 10"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH - 10"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
        <xsl:element name="col">
          <xsl:attribute name="style">
            width: <xsl:value-of select="$FIFTH_CONTENT_WIDTH"/>px;
          </xsl:attribute>
        </xsl:element>
        <!-- </col> -->
      </xsl:element>
      <xsl:element name="thead">
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">sectionheader</xsl:attribute>
            <xsl:attribute name="colspan">5</xsl:attribute>
            <xsl:element name="b">
              <xsl:value-of select="$title"/>
            </xsl:element>
          </xsl:element>
          <!-- </th> -->
        </xsl:element>
        <xsl:element name="tr">
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS</xsl:attribute>
            Name
          </xsl:element>
          <!-- </th> -->
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS</xsl:attribute>
            Occupation/Qualifications
          </xsl:element>
          <!-- </th> -->
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS</xsl:attribute>
            Organisation
          </xsl:element>
          <!-- </th> -->
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS</xsl:attribute>
            Address
          </xsl:element>
          <!-- </th> -->
          <xsl:element name="th">
            <xsl:attribute name="class">RECIPIENTS_TABLE_HEADER_RIGHT_CELL_CLASS</xsl:attribute>
            Contact
          </xsl:element>
          <!-- </th> -->
        </xsl:element>
        <!-- </tr> -->
      </xsl:element>
      <!-- </thead> -->

      <xsl:element name="tbody">
        <xsl:for-each select="$participants">
          <xsl:call-template name="getParticipantsTableBodyRow"/>
        </xsl:for-each>
      </xsl:element>
      <!-- </tbody> -->
    </xsl:element>
    <!-- </table> -->
  </xsl:template>

  <xsl:template name="getParticipantsTableBodyRow">
    <xsl:variable name="participantOccupation">
      <xsl:choose>
        <xsl:when test="./cda:associatedEntity/cda:associatedPerson/ext:asEmployment/ext:jobCode/@displayName and
                    string-length(./cda:associatedEntity/cda:associatedPerson/ext:asEmployment/ext:jobCode/@displayName) &gt; 0">
          <xsl:value-of select="./cda:associatedEntity/cda:associatedPerson/ext:asEmployment/ext:jobCode/@displayName"/>
        </xsl:when>
        <xsl:when test="./cda:associatedEntity/cda:associatedPerson/ext:asEmployment/ext:jobCode/cda:originalText and
                    string-length(./cda:associatedEntity/cda:associatedPerson/ext:asEmployment/ext:jobCode/cda:originalText) &gt; 0">
          <xsl:value-of select="./cda:associatedEntity/cda:associatedPerson/ext:asEmployment/ext:jobCode/cda:originalText"/>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="participantQualifications">
      <xsl:choose>
        <xsl:when test="./cda:associatedEntity/cda:associatedPerson/ext:asQualifications/ext:code and
                    string-length(./cda:associatedEntity/cda:associatedPerson/ext:asQualifications/ext:code/@displayName) &gt; 0">
          <xsl:value-of select="./cda:associatedEntity/cda:associatedPerson/ext:asQualifications/ext:code/@displayName"/>
        </xsl:when>
        <xsl:when test="./cda:associatedEntity/cda:associatedPerson/ext:asQualifications/ext:code/cda:originalText and
                    string-length(./cda:associatedEntity/cda:associatedPerson/ext:asQualifications/ext:code/cda:originalText) &gt; 0">
          <xsl:value-of select="./cda:associatedEntity/cda:associatedPerson/ext:asQualifications/ext:code/cda:originalText"/>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:element name="tr">
      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:for-each select="./cda:associatedEntity/cda:associatedPerson/cda:name">
          <xsl:if test="position() > 1">
            <xsl:value-of select="$AKA_STRING"/>
          </xsl:if>
          <xsl:call-template name="show-name">
            <xsl:with-param name="name" select="."/>
          </xsl:call-template>
          <xsl:element name="br"/>
        </xsl:for-each>
        <xsl:for-each select="./cda:associatedEntity/cda:associatedPerson/ext:asEntityIdentifier">
          <xsl:call-template name="getProviderIndividualIdentifier">
            <xsl:with-param name="entityIdentifier" select="."/>
          </xsl:call-template>
        </xsl:for-each>
      </xsl:element>
      <!-- </td> -->
      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:choose>
          <xsl:when test="string-length($participantOccupation) &gt; 0 or
                        string-length($participantOccupation) &gt; 0">
            <xsl:if test="string-length($participantOccupation) &gt; 0">
              <xsl:element name="b">Occupation:</xsl:element>
              <xsl:element name="br"/>
              <xsl:value-of select="$participantOccupation"/>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:if test="string-length($participantQualifications) &gt; 0">
              <xsl:element name="b">Qualifications:</xsl:element>
              <xsl:element name="br"/>
              <xsl:value-of select="$participantQualifications"/>
              <xsl:element name="br"/>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>Not Provided</xsl:otherwise>
        </xsl:choose>
      </xsl:element>
      <!-- </td> -->
      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:for-each select="./cda:associatedEntity/cda:associatedPerson/ext:asEmployment/ext:employerOrganization/cda:asOrganizationPartOf/cda:wholeOrganization">
          <xsl:for-each select="./cda:name">
            <xsl:if test="string-length(.) &gt; 0">
              <xsl:if test="position() > 1">
                <xsl:value-of select="$AKA_STRING"/>
              </xsl:if>
              <xsl:value-of select="."/>
              <xsl:element name="br"/>
            </xsl:if>
          </xsl:for-each>
          <xsl:for-each select="./ext:asEntityIdentifier">
            <xsl:call-template name="getProviderOrganisationIdentifier">
              <xsl:with-param name="entityIdentifier" select="."/>
            </xsl:call-template>
          </xsl:for-each>
          <xsl:element name="br"/>
        </xsl:for-each>
      </xsl:element>
      <!-- </td> -->

      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:if test="count(./cda:associatedEntity/cda:addr) &gt; 0">
          <xsl:for-each select="./cda:associatedEntity/cda:addr">
            <xsl:call-template name="show-address">
              <xsl:with-param name="address" select="."/>
            </xsl:call-template>
          </xsl:for-each>
        </xsl:if>
      </xsl:element>
      <!-- </td> -->

      <xsl:element name="td">
        <xsl:attribute name="class">RECIPIENTS_TABLE_BODY_RIGHT_CELL_CLASS</xsl:attribute>
        <xsl:if test="count(./cda:associatedEntity/cda:telecom[starts-with(@value, 'tel:')]) &gt; 0">
          <xsl:for-each select="./cda:associatedEntity/cda:telecom[starts-with(@value, 'tel:')]">
            <xsl:if test="position()=1">
              <xsl:element name="b">Phone:</xsl:element>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:call-template name="show-telecom">
              <xsl:with-param name="telecom" select="."/>
            </xsl:call-template>
            <xsl:element name="br"/>
          </xsl:for-each>
        </xsl:if>

        <xsl:if test="count(./cda:associatedEntity/cda:telecom[starts-with(@value, 'fax:')]) &gt; 0">
          <xsl:for-each select="./cda:associatedEntity/cda:telecom[starts-with(@value, 'fax:')]">
            <xsl:if test="position()=1">
              <xsl:element name="b">Facsimile machine:</xsl:element>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:call-template name="show-telecom">
              <xsl:with-param name="telecom" select="."/>
            </xsl:call-template>
            <xsl:element name="br"/>
          </xsl:for-each>
        </xsl:if>

        <xsl:if test="count(./cda:associatedEntity/cda:telecom[starts-with(@value, 'mailto:')]) &gt; 0">
          <xsl:for-each select="./cda:associatedEntity/cda:telecom[starts-with(@value, 'mailto:')]">
            <xsl:if test="position()=1">
              <xsl:element name="b">Email:</xsl:element>
              <xsl:element name="br"/>
            </xsl:if>
            <xsl:call-template name="show-telecom">
              <xsl:with-param name="telecom" select="."/>
            </xsl:call-template>
            <xsl:element name="br"/>
          </xsl:for-each>
        </xsl:if>
      </xsl:element>
      <!-- </td> -->
    </xsl:element>
    <!-- </tr> -->
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] DETAILS TEMPLATES -->




  <!-- CDA BODY TEMPLATES -->
  <!--================================================================================================================================================================================-->

  <xsl:template match="cda:component/cda:structuredBody">
    <xsl:for-each select="cda:component/cda:section">
      <xsl:call-template name="section"/>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="cda:component/cda:nonXMLBody">
    <xsl:variable name="mediaType">
      <xsl:choose>
        <xsl:when test="./cda:text/@mediaType and
                    string-length(./cda:text/@mediaType) &gt; 0">
          <xsl:value-of select="cda:text/@mediaType"/>
        </xsl:when>
      </xsl:choose>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$mediaType='application/pdf' or $mediaType='text/rtf' or $mediaType='text/plain' or $mediaType='text/html'">
        <xsl:if test="./cda:text/cda:reference/@value and
                    string-length(./cda:text/cda:reference/@value) &gt; 0">
          <xsl:call-template name="getHorizontalSpacer"/>
          <xsl:element name="a">
            <xsl:call-template name="addID">
              <xsl:with-param name="element" select="."/>
            </xsl:call-template>
            <xsl:attribute name="href">
              <xsl:value-of select="./cda:text/cda:reference/@value"/>
            </xsl:attribute>
            <xsl:choose>
              <xsl:when test="$mediaType='application/pdf'">PDF document</xsl:when>
              <xsl:when test="$mediaType='text/rtf'">RTF document</xsl:when>
              <xsl:when test="$mediaType='text/html'">HTML document</xsl:when>
              <xsl:otherwise>Text Document</xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:if test="$mediaType='image/gif' or $mediaType='image/jpeg' or $mediaType='image/png'">
          <xsl:if test="./cda:text/cda:reference/@value and
                        string-length(./cda:text/cda:reference/@value) &gt; 0">
            <xsl:call-template name="getHorizontalSpacer"/>
            <xsl:element name="table">
              <xsl:attribute name="summary">IMAGE</xsl:attribute>
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="align">center</xsl:attribute>
                    <xsl:element name="img">
                      <xsl:attribute name="src">
                        <xsl:value-of select="./cda:text/cda:reference/@value"/>
                      </xsl:attribute>
                      <xsl:attribute name="style">padding-bottom:0.5em;</xsl:attribute>
                    </xsl:element>
                    <!-- </img> -->
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="align">center</xsl:attribute>
                    Image Attachment
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:element>
              <!-- </tbody> -->
            </xsl:element>
            <!-- </table> -->
          </xsl:if>
        </xsl:if>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:call-template name="getHorizontalSpacer"/>
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] CDA BODY TEMPLATES -->




  <!-- CDA SECTION TEMPLATES -->
  <!--================================================================================================================================================================================-->

  <xsl:template name="section">
    <xsl:if test="cda:title">
      <xsl:call-template name="section-title">
        <xsl:with-param name="title" select="cda:title"/>
        <xsl:with-param name="sectionId" select="./@ID"/>
      </xsl:call-template>
    </xsl:if>
    <xsl:call-template name="section-text"/>
    <xsl:for-each select="cda:component/cda:section">
      <xsl:call-template name="nestedSection"/>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="getSectionPath">
    <xsl:param name="section"/>
    <xsl:param name="previousSectionTitle"/>
    <xsl:choose>
      <xsl:when test="$section/../../../cda:section">
        <xsl:call-template name="getSectionPath">
          <xsl:with-param name="section" select="$section/../../../cda:section"/>
          <xsl:with-param name="previousSectionTitle">
            <xsl:choose>
              <xsl:when test="$previousSectionTitle">
                <xsl:choose>
                  <xsl:when test="$section/cda:title and
                                        string-length($section/cda:title) &gt; 0">
                    <xsl:value-of select="concat($section/cda:title, $SECTION_TITLE_NAVIGATION_SEPARATOR, $previousSectionTitle)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="concat('Unlabeled Section', $SECTION_TITLE_NAVIGATION_SEPARATOR, $previousSectionTitle)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="$section/cda:title and
                                        string-length($section/cda:title) &gt; 0">
                    <xsl:value-of select="$section/cda:title"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>Unlabeled Section</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$section/cda:title and
                        string-length($section/cda:title) &gt; 0">
            <xsl:value-of select="concat($section/cda:title, $SECTION_TITLE_NAVIGATION_SEPARATOR, $previousSectionTitle)"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="concat('Unlabeled Section', $SECTION_TITLE_NAVIGATION_SEPARATOR, $previousSectionTitle)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="section-title">
    <xsl:param name="title"/>
    <xsl:param name="sectionId"/>
    <xsl:choose>
      <xsl:when test="contains($title, $SECTION_TITLE_NAVIGATION_SEPARATOR)">
        <xsl:variable name="actualSectionTitle">
          <xsl:call-template name="substring-after-last-occurance">
            <xsl:with-param name="string" select="$title"/>
            <xsl:with-param name="argument" select="$SECTION_TITLE_NAVIGATION_SEPARATOR"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="leadIn">
          <xsl:value-of select="concat(substring-before($title, concat($SECTION_TITLE_NAVIGATION_SEPARATOR, $actualSectionTitle)), $SECTION_TITLE_NAVIGATION_SEPARATOR)"/>
        </xsl:variable>
        <xsl:element name="div">
          <xsl:if test="$sectionId and
                        string-length($sectionId) &gt; 0">
            <xsl:attribute name="id">
              <xsl:value-of select="$sectionId"/>
            </xsl:attribute>
          </xsl:if>
          <xsl:attribute name="class">sectiontitleheader</xsl:attribute>
          <xsl:value-of select="$actualSectionTitle"/>
          <span style="font-weight: normal; font-size: 9px;">
            <xsl:text> (</xsl:text>
            <xsl:value-of select="$leadIn"/>
            <span style="font-weight: bold;">
              <xsl:value-of select="$actualSectionTitle"/>
            </span>
            <xsl:text>)</xsl:text>
          </span>
        </xsl:element>
        <!-- </div> -->
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="div">
          <xsl:if test="$sectionId and
                        string-length($sectionId) &gt; 0">
            <xsl:attribute name="id">
              <xsl:value-of select="$sectionId"/>
            </xsl:attribute>
          </xsl:if>
          <xsl:attribute name="class">sectiontitleheader</xsl:attribute>
          <xsl:value-of select="$title"/>
        </xsl:element>
        <!-- </div> -->
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="section-text">
    <xsl:element name="div">
      <xsl:attribute name="class">pageWidth</xsl:attribute>
      <xsl:apply-templates select="cda:text"/>
    </xsl:element>
    <xsl:if test="cda:text or cda:title">
      <xsl:call-template name="getHorizontalSpacer"/>
    </xsl:if>
  </xsl:template>

  <xsl:template name="nestedSection">
    <xsl:call-template name="section-title">
      <xsl:with-param name="title">
        <xsl:call-template name="getSectionPath">
          <xsl:with-param name="section" select="."/>
          <xsl:with-param name="sectionId" select="./@ID"/>
        </xsl:call-template>
      </xsl:with-param>
    </xsl:call-template>
    <xsl:apply-templates select="cda:text"/>
    <xsl:for-each select="cda:component/cda:section">
      <xsl:call-template name="nestedSection"/>
    </xsl:for-each>
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] CDA SECTION TEMPLATES -->




  <!-- CDA NARRATIVE ELEMENT TEMPLATES -->
  <!--================================================================================================================================================================================-->

  <xsl:template match="cda:footnote">
    <xsl:variable name="footnote-num">
      <xsl:number level="any" count="cda:footnote"/>
    </xsl:variable>
    <xsl:element name="sup">
      <xsl:element name="a">
        <xsl:attribute name="href">
          #F_footnote-<xsl:value-of select="$footnote-num"/>
        </xsl:attribute>
        <xsl:value-of select="$footnote-num"/>
      </xsl:element>
      <!-- </a> -->
    </xsl:element>
    <!-- </sup> -->
  </xsl:template>

  <xsl:template match="cda:footnote" mode="footnote">
    <xsl:variable name="footnote-num">
      <xsl:number level="any" count="cda:footnote"/>
    </xsl:variable>
    <xsl:element name="p">
      <xsl:attribute name="ID">
        F_footnote-<xsl:value-of select="$footnote-num"/>
      </xsl:attribute>
      <xsl:element name="b">
        <xsl:if test="./@ID">
          <xsl:attribute name="ID">
            <xsl:value-of select="./@ID"/>
          </xsl:attribute>
        </xsl:if>
        <xsl:text>[</xsl:text>
        <xsl:value-of select="$footnote-num"/>
        <xsl:text>] </xsl:text>
      </xsl:element>
      <!-- </b> -->
      <xsl:apply-templates select="*|text()"/>
    </xsl:element>
    <!-- </p> -->
  </xsl:template>

  <xsl:template match="cda:footnoteRef">
    <xsl:variable name="theFootnote" select="//cda:footnote[@ID=current()/@IDREF]"/>
    <xsl:variable name="footnote-num">
      <xsl:for-each select="$theFootnote">
        <xsl:number level="any" count="cda:footnote"/>
      </xsl:for-each>
    </xsl:variable>
    <xsl:element name="sup">
      <xsl:element name="a">
        <xsl:attribute name="href">
          #<xsl:value-of select="@IDREF"/>
        </xsl:attribute>
        <xsl:value-of select="$footnote-num"/>
      </xsl:element>
      <!-- </a> -->
    </xsl:element>
    <!-- </sup> -->
  </xsl:template>

  <xsl:template match="cda:linkHtml">
    <xsl:if test="string-length(./text()) &gt; 0 and
            string-length(./@href) &gt; 0">
      <xsl:element name="a">
        <xsl:attribute name="href">
          <xsl:value-of select="./@href"/>
        </xsl:attribute>
        <xsl:value-of select="./text()"/>
      </xsl:element>
    </xsl:if>
  </xsl:template>

  <xsl:template match="cda:content">
    <xsl:element name="span">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:choose>
        <xsl:when test="@styleCode">
          <xsl:call-template name="processStyleCode">
            <xsl:with-param name="code" select="@styleCode"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:element>
    <!-- </span> -->
  </xsl:template>

  <xsl:template match="cda:br">
    <xsl:element name="br">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="cda:list">
    <xsl:choose>
      <xsl:when test="@styleCode">
        <xsl:choose>
          <xsl:when test="@styleCode='Disc'">
            <xsl:element name="ul">
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:attribute name="style">list-style-type: disc;</xsl:attribute>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </xsl:element>
          </xsl:when>

          <xsl:when test="@styleCode='Circle'">
            <xsl:element name="ul">
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:attribute name="style">list-style-type: circle;</xsl:attribute>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </xsl:element>
          </xsl:when>

          <xsl:when test="@styleCode='Square'">
            <xsl:element name="ul">
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:attribute name="style">list-style-type: square;</xsl:attribute>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </xsl:element>
          </xsl:when>

          <xsl:otherwise>
            <ul>
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </ul>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <ul>
          <xsl:call-template name="addID">
            <xsl:with-param name="element" select="."/>
          </xsl:call-template>
          <xsl:for-each select="cda:item">
            <li>
              <xsl:apply-templates/>
            </li>
          </xsl:for-each>
        </ul>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="cda:list[@listType='ordered']">
    <xsl:choose>
      <xsl:when test="@styleCode">
        <xsl:choose>
          <xsl:when test="@styleCode='LittleRoman'">
            <xsl:element name="ol">
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:attribute name="style">list-style-type: lower-roman;</xsl:attribute>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </xsl:element>
          </xsl:when>

          <xsl:when test="@styleCode='BigRoman'">
            <xsl:element name="ol">
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:attribute name="style">list-style-type: upper-roman;</xsl:attribute>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </xsl:element>
          </xsl:when>

          <xsl:when test="@styleCode='LittleAlpha'">
            <xsl:element name="ol">
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:attribute name="style">list-style-type: lower-alpha;</xsl:attribute>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </xsl:element>
          </xsl:when>

          <xsl:when test="@styleCode='BigAlpha'">
            <xsl:element name="ol">
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:attribute name="style">list-style-type: upper-alpha;</xsl:attribute>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </xsl:element>
          </xsl:when>

          <xsl:otherwise>
            <ol>
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:for-each select="cda:item">
                <li>
                  <xsl:choose>
                    <xsl:when test="@styleCode">
                      <xsl:call-template name="processStyleCode">
                        <xsl:with-param name="initialCssClasses"/>
                        <xsl:with-param name="code" select="@styleCode"/>
                      </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </li>
              </xsl:for-each>
            </ol>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <ol>
          <xsl:call-template name="addID">
            <xsl:with-param name="element" select="."/>
          </xsl:call-template>
          <xsl:for-each select="cda:item">
            <li>
              <xsl:choose>
                <xsl:when test="@styleCode">
                  <xsl:call-template name="processStyleCode">
                    <xsl:with-param name="initialCssClasses"/>
                    <xsl:with-param name="code" select="@styleCode"/>
                  </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>
            </li>
          </xsl:for-each>
        </ol>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="cda:caption"/>

  <xsl:template match="cda:table">
    <xsl:choose>
      <xsl:when test="cda:caption and
                            string-length(cda:caption) &gt; 0">
        <xsl:element name="table">
          <xsl:attribute name="class">generictable</xsl:attribute>
          <xsl:call-template name="addID">
            <xsl:with-param name="element" select="."/>
          </xsl:call-template>

          <xsl:attribute name="summary">
            <xsl:value-of select="cda:caption"/>
          </xsl:attribute>
          <xsl:element name="caption">
            <xsl:attribute name="class">tableCaption</xsl:attribute>
            <xsl:value-of select="cda:caption"/>
          </xsl:element>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="table">
          <xsl:attribute name="class">generictable</xsl:attribute>
          <xsl:attribute name="summary">no summary</xsl:attribute>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:call-template name="getHorizontalSpacer"/>
  </xsl:template>

  <xsl:template match="cda:thead">
    <xsl:element name="thead">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates/>
    </xsl:element>
    <!-- </thead> -->
  </xsl:template>

  <xsl:template match="cda:tbody">
    <xsl:element name="tbody">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="cda:tr">
    <xsl:element name="tr">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="cda:th">
    <xsl:element name="th">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:if test="./@colspan">
        <xsl:attribute name="colspan">
          <xsl:value-of select="./@colspan"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="./@rowspan">
        <xsl:attribute name="rowspan">
          <xsl:value-of select="./@rowspan"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:variable name="colWidthStyle">
        <xsl:choose>
          <xsl:when test="./@styleCode and contains(./@styleCode, 'xColWidthPx')">
            <xsl:call-template name="processColWidthPx">
              <xsl:with-param name="code" select="./@styleCode"/>
            </xsl:call-template>
          </xsl:when>
          <xsl:otherwise/>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="./@styleCode">
          <xsl:choose>
            <xsl:when test="contains(./@styleCode, 'rule') or contains(./@styleCode, 'Rule')">
              <xsl:variable name="tableCellRuleCssClasses">
                <xsl:call-template name="processTableCellStyleCode">
                  <xsl:with-param name="code" select="./@styleCode"/>
                </xsl:call-template>
              </xsl:variable>
              <xsl:call-template name="processStyleCode">
                <xsl:with-param name="initialCssClasses">
                  <xsl:value-of select="$tableCellRuleCssClasses"/>
                </xsl:with-param>
                <xsl:with-param name="code" select="@styleCode"/>
                <xsl:with-param name="initialStyles" select="$colWidthStyle"/>
              </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
              <xsl:call-template name="processStyleCode">
                <xsl:with-param name="code" select="@styleCode"/>
                <xsl:with-param name="initialCssClasses" select="concat('borderedcolumnheadings ' , ./@styleCode)"/>
                <xsl:with-param name="initialStyles" select="$colWidthStyle"/>
              </xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:attribute name="class">borderedcolumnheadings</xsl:attribute>
          <xsl:apply-templates/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:element>
  </xsl:template>

  <xsl:template match="cda:td">
    <xsl:element name="td">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:if test="./@colspan">
        <xsl:attribute name="colspan">
          <xsl:value-of select="./@colspan"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="./@rowspan">
        <xsl:attribute name="rowspan">
          <xsl:value-of select="./@rowspan"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:variable name="colWidthStyle">
        <xsl:choose>
          <xsl:when test="./@styleCode and contains(./@styleCode, 'xColWidthPx')">
            <xsl:call-template name="processColWidthPx">
              <xsl:with-param name="code" select="./@styleCode"/>
            </xsl:call-template>
          </xsl:when>
          <xsl:otherwise/>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="./@styleCode">
          <xsl:choose>
            <xsl:when test="contains(./@styleCode, 'rule') or contains(./@styleCode, 'Rule')">
              <xsl:variable name="tableCellRuleCssClasses">
                <xsl:call-template name="processTableCellStyleCode">
                  <xsl:with-param name="code" select="./@styleCode"/>
                </xsl:call-template>
              </xsl:variable>
              <xsl:call-template name="processStyleCode">
                <xsl:with-param name="initialCssClasses">
                  <xsl:value-of select="$tableCellRuleCssClasses"/>
                </xsl:with-param>
                <xsl:with-param name="code" select="@styleCode"/>
                <xsl:with-param name="initialStyles" select="$colWidthStyle"/>
              </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
              <xsl:call-template name="processStyleCode">
                <xsl:with-param name="code" select="@styleCode"/>
                <xsl:with-param name="initialCssClasses">borderedcolumnheadingvalues</xsl:with-param>
                <xsl:with-param name="initialStyles" select="$colWidthStyle"/>
              </xsl:call-template>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:attribute name="class">borderedcolumnheadingvalues</xsl:attribute>
          <xsl:apply-templates/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:element>
  </xsl:template>

  <xsl:template match="cda:renderMultiMedia">
    <xsl:variable name="referenceObjectId" select="@referencedObject"/>
    <xsl:variable name="mediaType">
      <xsl:choose>
        <xsl:when test="//cda:observationMedia[@ID=$referenceObjectId]/cda:value/@mediaType">
          <xsl:value-of select="//cda:observationMedia[@ID=$referenceObjectId]/cda:value/@mediaType"/>
        </xsl:when>
        <xsl:otherwise>text/plain</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$mediaType='application/pdf' or $mediaType='text/rtf' or $mediaType='text/plain' or $mediaType='text/html'">
        <xsl:if test="//cda:observationMedia[@ID=$referenceObjectId]/cda:value/cda:reference/@value and
                              string-length(//cda:observationMedia[@ID=$referenceObjectId]/cda:value/cda:reference/@value) &gt; 0">
          <!--xsl:element name="a"-->
          <xsl:element name="p">
            <xsl:call-template name="addID">
              <xsl:with-param name="element" select="."/>
            </xsl:call-template>
            <!--xsl:attribute name="href">
              <xsl:value-of select="//cda:observationMedia[@ID=$referenceObjectId]/cda:value/cda:reference/@value"/>
            </xsl:attribute>
            <xsl:choose>
              <xsl:when test="cda:caption and
                                            string-length(cda:caption) &gt; 0">
                <xsl:value-of select="cda:caption"/>
              </xsl:when>
            <xsl:otherwise-->
                <xsl:choose>
                  <xsl:when test="$mediaType='application/pdf'">PDF document</xsl:when>
                  <xsl:when test="$mediaType='text/rtf'">RTF document</xsl:when>
                  <xsl:when test="$mediaType='text/html'">HTML document</xsl:when>
                  <xsl:otherwise>Attachment</xsl:otherwise>
                </xsl:choose>
            <!--/xsl:otherwise>
            </xsl:choose-->
          </xsl:element>
        </xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:if test="$mediaType='image/gif' or $mediaType='image/jpeg' or $mediaType='image/png'">
          <xsl:if test="//cda:observationMedia[@ID=$referenceObjectId]/cda:value/cda:reference/@value and
                                  string-length(//cda:observationMedia[@ID=$referenceObjectId]/cda:value/cda:reference/@value) &gt; 0">
            <xsl:call-template name="getHorizontalSpacer"/>
            <xsl:element name="table">
              <xsl:attribute name="summary">IMAGE</xsl:attribute>
              <xsl:call-template name="addID">
                <xsl:with-param name="element" select="."/>
              </xsl:call-template>
              <xsl:element name="tbody">
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="align">center</xsl:attribute>
                    <xsl:element name="img">
                      <xsl:attribute name="src">
                        <xsl:value-of select="//cda:observationMedia[@ID=$referenceObjectId]/cda:value/cda:reference/@value"/>
                      </xsl:attribute>
                      <xsl:attribute name="style">padding-bottom:0.5em;</xsl:attribute>
                      <xsl:choose>
                        <xsl:when test="cda:caption and
                                                                 string-length(cda:caption) &gt; 0">
                          <xsl:attribute name="alt">
                            <xsl:value-of select="cda:caption"/>
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise>Image Attachment</xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                    <!-- </img> -->
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
                <xsl:element name="tr">
                  <xsl:element name="td">
                    <xsl:attribute name="align">center</xsl:attribute>
                    <xsl:choose>
                      <xsl:when test="cda:caption and
                                                string-length(cda:caption) &gt; 0">
                        <xsl:value-of select="cda:caption"/>
                      </xsl:when>
                      <xsl:otherwise>Image Attachment</xsl:otherwise>
                    </xsl:choose>
                  </xsl:element>
                  <!-- </td> -->
                </xsl:element>
                <!-- </tr> -->
              </xsl:element>
              <!-- </tbody> -->
            </xsl:element>
            <!-- </table> -->
          </xsl:if>
        </xsl:if>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="cda:paragraph">
    <xsl:element name="p">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:attribute name="class">paragraph</xsl:attribute>
      <xsl:choose>
        <xsl:when test="@styleCode">
          <xsl:call-template name="processStyleCode">
            <xsl:with-param name="code" select="@styleCode"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:element>
    <!-- </p> -->
  </xsl:template>

  <xsl:template match="cda:sup">
    <xsl:element name="sup">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="cda:sub">
    <xsl:element name="sub">
      <xsl:call-template name="addID">
        <xsl:with-param name="element" select="."/>
      </xsl:call-template>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] CDA NARRATIVE ELEMENT TEMPLATES -->




  <!-- STYLE CODE TEMPLATES -->
  <!--================================================================================================================================================================================-->

  <xsl:template name="processStyleCode">
    <xsl:param name="code"/>
    <xsl:param name="initialCssClasses"/>
    <xsl:param name="initialStyles"/>

    <!-- Styles -->
    <xsl:variable name="colourStyles">
      <xsl:choose>
        <xsl:when test="contains($code, 'xFgColour') or
                                contains($code, 'xBgColour')">
          <xsl:call-template name="processColourStyleCode">
            <xsl:with-param name="code" select="$code"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="fontSizePxStyle">
      <xsl:choose>
        <xsl:when test="contains($code, 'xFontSizePx')">
          <xsl:call-template name="processFontSizePx">
            <xsl:with-param name="code" select="$code"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="fontSizeEmStyle">
      <xsl:choose>
        <xsl:when test="contains($code, 'xFontSizeEm')">
          <xsl:call-template name="processFontSizeEm">
            <xsl:with-param name="code" select="$code"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:attribute name="style">
      <xsl:value-of select="concat($initialStyles, ' ', $colourStyles, ' ', $fontSizePxStyle, ' ', $fontSizeEmStyle)"/>
    </xsl:attribute>

    <!-- Classes -->
    <xsl:variable name="boldClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'Bold')">
          <xsl:text>bold</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="italicClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'Italic')">
          <xsl:text>italic</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="underlineClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'Underline')">
          <xsl:text>underline</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="emphasisClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'Emphasis')">
          <xsl:text>emphasis</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="xFixedClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'xFixed')">
          <xsl:text>xFixed</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:attribute name="class">
      <xsl:value-of select="concat($initialCssClasses, ' ', $boldClass, ' ', $italicClass, ' ', $underlineClass, ' ', $emphasisClass, ' ', $xFixedClass)"/>
    </xsl:attribute>

    <!-- pre element -->
    <xsl:choose>
      <xsl:when test="contains($code, 'xPre')">
        <xsl:element name="pre">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="processTableCellStyleCode">
    <xsl:param name="code"/>
    <xsl:param name="initialCssClasses"/>

    <!-- Classes -->
    <xsl:variable name="lRuleClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'Lrule')">
          <xsl:text>Lrule</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="rRuleClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'Rrule')">
          <xsl:text>Rrule</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="topruleClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'Toprule')">
          <xsl:text>toprule</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="botruleClass">
      <xsl:choose>
        <xsl:when test="contains($code, 'Botrule')">
          <xsl:text>botrule</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="tableCellClasses">
      <xsl:if test="$initialCssClasses and string-length($initialCssClasses) &gt; 0">
        <xsl:value-of select="$initialCssClasses"/>
        <xsl:text/>
      </xsl:if>
      <xsl:choose>
        <xsl:when test="string-length($lRuleClass) &gt; 0">
          <xsl:value-of select="$lRuleClass"/>
          <xsl:text/>
        </xsl:when>
        <xsl:otherwise>noLrule </xsl:otherwise>
      </xsl:choose>

      <xsl:choose>
        <xsl:when test="string-length($rRuleClass) &gt; 0">
          <xsl:value-of select="$rRuleClass"/>
          <xsl:text/>
        </xsl:when>
        <xsl:otherwise>noRrule </xsl:otherwise>
      </xsl:choose>

      <xsl:choose>
        <xsl:when test="string-length($topruleClass) &gt; 0">
          <xsl:value-of select="$topruleClass"/>
          <xsl:text/>
        </xsl:when>
        <xsl:otherwise>noToprule </xsl:otherwise>
      </xsl:choose>

      <xsl:choose>
        <xsl:when test="string-length($botruleClass) &gt; 0">
          <xsl:value-of select="$botruleClass"/>
          <xsl:text/>
        </xsl:when>
        <xsl:otherwise>noBotrule </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:value-of select="$tableCellClasses"/>
  </xsl:template>

  <xsl:template name="processColourStyleCode">
    <xsl:param name="code"/>

    <!-- Isolate xFgColour stylecode -->
    <xsl:variable name="fgColourStyleCodeStart" select="substring-after($code, 'xFgColour')"/>
    <xsl:variable name="fgColourHexCode">
      <xsl:choose>
        <xsl:when test="contains($fgColourStyleCodeStart, ' ')">
          <xsl:value-of select="substring-before($fgColourStyleCodeStart, ' ')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$fgColourStyleCodeStart"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- Isolate xBgColour stylecode -->
    <xsl:variable name="bgColourStyleCodeStart" select="substring-after($code, 'xBgColour')"/>
    <xsl:variable name="bgColourHexCode">
      <xsl:choose>
        <xsl:when test="contains($bgColourStyleCodeStart, ' ')">
          <xsl:value-of select="substring-before($bgColourStyleCodeStart, ' ')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$bgColourStyleCodeStart"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- generate style value -->
    <xsl:variable name="colourStyles">
      <xsl:choose>
        <xsl:when test="$fgColourHexCode != '' and $bgColourHexCode !=''">
          <xsl:text>background: #</xsl:text>
          <xsl:value-of select="$bgColourHexCode"/>
          <xsl:text>;</xsl:text>
          <xsl:text> color: #</xsl:text>
          <xsl:value-of select="$fgColourHexCode"/>
          <xsl:text>;</xsl:text>
        </xsl:when>
        <xsl:when test="$fgColourHexCode = '' and $bgColourHexCode !=''">
          <xsl:text>background: #</xsl:text>
          <xsl:value-of select="$bgColourHexCode"/>
          <xsl:text>;</xsl:text>
        </xsl:when>
        <xsl:when test="$fgColourHexCode != '' and $bgColourHexCode =''">
          <xsl:text>color: #</xsl:text>
          <xsl:value-of select="$fgColourHexCode"/>
          <xsl:text>;</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>
    <xsl:value-of select="$colourStyles"/>
  </xsl:template>

  <xsl:template name="processFontSizePx">
    <xsl:param name="code"/>

    <!-- Isolate xFontSize stylecode -->
    <xsl:variable name="fontSizeStyleCodeStart" select="substring-after($code, 'xFontSizePx')"/>
    <xsl:variable name="fontSize">
      <xsl:choose>
        <xsl:when test="contains($fontSizeStyleCodeStart, ' ')">
          <xsl:value-of select="substring-before($fontSizeStyleCodeStart, ' ')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$fontSizeStyleCodeStart"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- generate style value -->
    <xsl:variable name="fontSizePxStyle">
      <xsl:choose>
        <xsl:when test="$fontSize != ''">
          <xsl:text>font-size: </xsl:text>
          <xsl:value-of select="$fontSize"/>
          <xsl:text>px;</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>
    <xsl:value-of select="$fontSizePxStyle"/>
  </xsl:template>

  <xsl:template name="processColWidthPx">
    <xsl:param name="code"/>

    <!-- Isolate xColWidth stylecode -->
    <xsl:variable name="colWidthStyleCodeStart" select="substring-after($code, 'xColWidthPx')"/>
    <xsl:variable name="colWidth">
      <xsl:choose>
        <xsl:when test="contains($colWidthStyleCodeStart, ' ')">
          <xsl:value-of select="substring-before($colWidthStyleCodeStart, ' ')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$colWidthStyleCodeStart"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- generate style value -->
    <xsl:variable name="colWidthStyle">
      <xsl:choose>
        <xsl:when test="$colWidth != ''">
          <xsl:text>width: </xsl:text>
          <xsl:value-of select="$colWidth"/>
          <xsl:text>px;</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>
    <xsl:value-of select="$colWidthStyle"/>
  </xsl:template>

  <xsl:template name="processFontSizeEm">
    <xsl:param name="code"/>

    <!-- Isolate xFontSize stylecode -->
    <xsl:variable name="fontSizeStyleCodeStart" select="substring-after($code, 'xFontSizeEm')"/>
    <xsl:variable name="fontSize">
      <xsl:choose>
        <xsl:when test="contains($fontSizeStyleCodeStart, ' ')">
          <xsl:value-of select="substring-before($fontSizeStyleCodeStart, ' ')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$fontSizeStyleCodeStart"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- generate style value -->
    <xsl:variable name="fontSizeEmStyle">
      <xsl:choose>
        <xsl:when test="$fontSize != ''">
          <xsl:text>font-size: </xsl:text>
          <xsl:value-of select="$fontSize"/>
          <xsl:text>em;</xsl:text>
        </xsl:when>
        <xsl:otherwise/>
      </xsl:choose>
    </xsl:variable>

    <xsl:value-of select="$fontSizeEmStyle"/>
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] STYLE CODE TEMPLATES TEMPLATES -->



  <!-- STRUCTURE TEMPLATES -->
  <!--================================================================================================================================================================================-->

  <xsl:template name="addCSS">
    <xsl:element name="style">
      <xsl:attribute name="type">text/css</xsl:attribute>
      <xsl:attribute name="media">all</xsl:attribute>
      <!-- CSS classes -->

      <!-- Table classes -->
      .RECIPIENTS_TABLE_CLASS {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      padding: 0px;
      border-spacing: 0px;
      border-collapse: collapse;
      table-layout: fixed;
      word-wrap: break-word;
      }

      .RECIPIENTS_TABLE_HEADER_NON-RIGHT_CELL_CLASS {
      background: <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BACKGROUND_COLOUR"/>;
      vertical-align: top;
      text-align: left;
      border-left: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-right: 0px;
      border-top: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-bottom: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      }

      .RECIPIENTS_TABLE_HEADER_RIGHT_CELL_CLASS {
      background: <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BACKGROUND_COLOUR"/>;
      vertical-align: top;
      text-align: left;
      border-left: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-right: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-top: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-bottom: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      }

      .RECIPIENTS_TABLE_BODY_NON-RIGHT_CELL_CLASS {
      background: <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BACKGROUND_COLOUR"/>;
      vertical-align: top;
      text-align: left;
      border-left: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-right: 0px;
      border-top: 0px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-bottom: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      }

      .RECIPIENTS_TABLE_BODY_RIGHT_CELL_CLASS {
      background: <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BACKGROUND_COLOUR"/>;
      vertical-align: top;
      text-align: left;
      border-left: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-right: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-top: 0px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      border-bottom: 1px SOLID <xsl:value-of select="$GENERAL_TABLE_HEADER_CELL_BORDER_COLOUR"/>;
      }

      .nbspSpan {
      margin-left: 4px;
      }

      .pageWidth {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      }
      .halfPageWidth {
      width: <xsl:value-of select="$HALF_CONTENT_WIDTH"/>px;
      }
      .quarterPageWidth {
      width: <xsl:value-of select="$QUARTER_CONTENT_WIDTH"/>px;
      }
      .pageHeaderItemGap {
      margin-left: <xsl:value-of select="$PAGE_HEADER_ITEM_GAP"/>px;
      }
      .summaryDetailsLeftGap {
      width: <xsl:value-of select="$SUMMARY_DETAILS_LEFT_GAP"/>px;
      }

      .generictable {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      border-spacing: 0px;
      padding: 0px;
      empty-cells: show;
      border: 1px SOLID #EEEEEE;
      word-wrap: break-word;
      }

      .VSRFgenerictable {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      border-spacing: 0px;
      padding: 0px;
      empty-cells: show;
      border: 1px SOLID #EEEEEE;
      table-layout: fixed;
      word-wrap: break-word;
      text-align: left;
      }

      .VSRFgenerictableNotFixed {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      border-spacing: 0px;
      padding: 0px;
      empty-cells: show;
      border: 1px SOLID #EEEEEE;
      word-wrap: break-word;
      }

      .VSRFMain {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      border-spacing: 0px;
      padding: 0px;
      border: 0px SOLID #EEEEEE;
      empty-cells: show;
      word-wrap: break-word;
      text-align: left;
      }

      .xFixed {
      font-family:monospace;
      }

      .underline {
      text-decoration: underline;
      }

      .nounderline {
      text-decoration: none;
      }

      .bold {
      font-weight: bold;
      }

      .emphasis {
      font-variant: small-caps;
      }

      .italic {
      font-style: italic;
      }

      .Lrule {
      border-left: 1px SOLID #000000;
      }

      .Rrule {
      border-right: 1px SOLID #000000;
      }

      .botrule {
      border-bottom: 1px SOLID #000000;
      }
      .toprule {
      border-top: 1px SOLID #000000;
      }

      .noLrule {
      border-left: 1px SOLID #EEEEEE;
      }

      .noRrule {
      border-right: 1px SOLID #EEEEEE;
      }

      .noBotrule {
      border-bottom: 1px SOLID #EEEEEE;
      }

      .noToprule {
      border-top: 1px SOLID #000000;
      }

      .tableCaption {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      font-weight: bold;
      text-align: left;
      }

      .sectionheader {
      background-color: #EEEEEE;
      text-align: left;
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      border-left: 0px;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 0px;
      padding: 0px;
      text-decoration: none;
      font-weight: bold;
      text-decoration: none;
      }

      .halfsectionheader {
      background-color: #EEEEEE;
      text-align: left;
      width: <xsl:value-of select="$HALF_CONTENT_WIDTH"/>px;
      border-left: 0px;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 0px;
      padding: 0px;
      text-decoration: none;
      font-weight: bold;
      text-decoration: none;
      }

      .sectiontitleheader {
      background-color: #DDDDDD;
      text-align: left;
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      max-width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      left: 10px;
      border-left: 0px;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 0px;
      padding: 0px;
      text-decoration: none;
      font-size: 14px;
      font-weight: bold;
      text-decoration: none;
      word-wrap: break-word;
      white-space: pre-wrap;
      }

      .paragraph {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      border-spacing: 0px;
      padding: 0px;
      border-spacing: 0px;
      empty-cells: show;
      border: 0px SOLID #EEEEEE;
      word-wrap: break-word;
      white-space: pre-wrap;
      }

      .horizontalspacer {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      height: 15px;
      border-style: none;
      border-width: 1px;
      border-color: #FFFFFF;
      }

      .halfHorizontalspacer {
      width: <xsl:value-of select="$HALF_CONTENT_WIDTH"/>px;
      height: 15px;
      border-style: none;
      border-width: 1px;
      border-color: #FFFFFF;
      }

      .facility {
      text-align: center;
      font-size: 16px;
      }

      .sidevaluenames {
      width: 120px;
      font-weight: bold;
      text-align: left;
      vertical-align: top;
      }

      .sidevalue {
      width: <xsl:value-of select="$HALF_CONTENT_WIDTH - 120"/>px;
      }

      .hi {
      font-size: 9px;
      }

      .<xsl:value-of select="$PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS"/> {
      font-size: 9px;
      margin-left: 20px;
      }

      .<xsl:value-of select="$PROVIDER_ORGANISATION_IDENTIFIER_CSS_CLASS"/> {
      font-size: 9px;
      margin-left: 20px;
      }

      .summarydetails {
      display: inline;
      width: <xsl:value-of select="$QUARTER_CONTENT_WIDTH - $TENTH_CONTENT_WIDTH"/>px;
      font-weight: bold;
      vertical-align: top;
      }

      .documentdetailsvalues {
      width: <xsl:value-of select="$QUARTER_CONTENT_WIDTH + ($TENTH_CONTENT_WIDTH div 2)"/>px;
      vertical-align: top;
      }

      .generalcolumnheadings {
      text-align: left;
      font-weight: bold;
      vertical-align: top;
      }

      .generalcolumnheadingvalues {
      text-align: left;
      }

      .borderedcolumnheadings {
      text-align: left;
      background: #FFFFFF;
      padding: 0px;
      vertical-align: top;
      border-left: 1px SOLID #EEEEEE;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 1px SOLID #EEEEEE;
      }

      .borderedcolumnheadingvalues {
      text-align: left;
      background: #FFFFFF;
      vertical-align: top;
      padding: 0px;
      border-left: 1px SOLID #EEEEEE;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 1px SOLID #EEEEEE;
      }

      <!-- Specific elements -->
      body {
      font-size:14px;
      font-family:Verdana;
      width: <xsl:value-of select="$FULL_VIEWPORT_WIDTH"/>px;
      margin-left: 0px;
      margin-right: 0px;
      text-align: left;
      }

      table {
      border-spacing: 0px;
      padding: 0px;
      border-spacing: 0px;
      empty-cells: show;
      page-break-inside: avoid !important;
      }

      td {
      border-left: 0px;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 0px;
      padding: 0px;
      }

      th {
      border-left: 0px;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 0px;
      padding: 0px;
      }

      pre {
      word-wrap: break-word;
      white-space: pre-wrap;
      }

      p.div {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      }

      a:link {
      color: blue;
      }

      a:visited {
      color: blue;
      }

      a:hover {
      color: red;
      }

      a:active {
      color: red;
      }

      .VSRFheader {
      background-color: #EEEEEE; text-align: left; width: <xsl:value-of select="$VSRF_HALFPAGE_WIDTH - 10"/>px;
      border-left: 0px;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 0px;
      padding: 10px;
      text-decoration: none;
      font-weight: bold;
      font-size: 32px;
      text-decoration: none;
      }

      .vsrfFull {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      border-spacing: 0px;
      padding: 0px;
      empty-cells: show;
      word-wrap: break-word;
      }

      .vsrfFullBox {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      border-left: 1px SOLID #000000;
      border-right: 1px SOLID #000000;
      border-top: 1px SOLID #000000;
      border-bottom: 1px SOLID #000000;
      padding: 0px;
      empty-cells: show;
      word-wrap: break-word;
      }

      .vsrfHalf {
      width: <xsl:value-of select="$VSRF_HALFPAGE_WIDTH"/>px;
      padding: 0px;
      border-spacing: 0px;
      empty-cells: show;
      }

      .vsrfHalfBox {
      width: <xsl:value-of select="$VSRF_HALFPAGE_WIDTH"/>px;
      padding: 0px;
      border-left: 1px SOLID #000000;
      border-right: 1px SOLID #000000;
      border-top: 1px SOLID #000000;
      border-bottom: 1px SOLID #000000;
      empty-cells: show;
      }

      .VSRFBox {
      border-left: 1px SOLID #000000;
      border-right: 1px SOLID #000000;
      border-top: 1px SOLID #000000;
      border-bottom: 1px SOLID #000000;
      }
      .VSRFBottom {
      border-left: 0px;
      border-right: 0px;
      border-top: 0px;
      border-bottom: 1px SOLID #000000;
      }
      .VSRFBottomRight {
      border-left: 0px;
      border-right: 1px SOLID #000000;
      border-top: 0px;
      border-bottom: 1px SOLID #000000;
      }

      .VSRFSection {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      font-size: 18px;
      font-weight: bold;
      background-color: #EEEEEE;
      text-align: left;
      }

      .VSRFSectionA {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      font-size: 18px;
      font-weight: bold;
      background-color: #EEEEEE;
      text-align: left;
      }

      .VSRFSectionL2 {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      font-size: 16px;
      font-weight: bold;
      background-color: #EEEEEE;
      text-align: left;
      }

      .VSRFSectionL2A {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px;
      font-size: 16px;
      font-weight: bold;
      background-color: #EEEEEE;
      text-align: left;
      }

      .VSRFpageWidth { width: <xsl:value-of select="$FULL_CONTENT_WIDTH - $VSRFReduction"/>px; }
      .VSRFsidevaluenames { width: <xsl:value-of select="$VSRF_ITEM_WIDTH"/>px; font-weight: bold; text-align: left; vertical-align: middle; }
      .VSRFsidevalue { width: <xsl:value-of select="$VSRF_HALFPAGE_WIDTH - $VSRF_ITEM_WIDTH"/>px; text-align: left; vertical-align: middle; }
      .VSRFWidesidevaluenames { width: <xsl:value-of select="$QUARTER_CONTENT_WIDTH - 5"/>px; font-weight: bold; text-align: left; vertical-align: middle; nowrap: nowrap; }
      .VSRFWidesidevalue { width: <xsl:value-of select="$QUARTER_CONTENT_WIDTH - 5"/>px; text-align: left;  vertical-align: middle; }
      .VSRFWidevaluenames { width: <xsl:value-of select="$QUARTER_CONTENT_WIDTH - 5"/>px; font-weight: bold; text-align: left; vertical-align: middle; nowrap: nowrap; }
      .VSRFWidevalue { width: <xsl:value-of select="$THREE_QUARTER_CONTENT_WIDTH - 5"/>px; text-align: left; vertical-align: middle; }

      <!-- Elements with id attributes -->
      div#<xsl:value-of select="$LOGO_IMG_ID"/> {
      width: 400px;
      height: 100px;
      clip: rect(0px, 400px, 100px, 0px);
      overflow: hidden;
      }

      <!-- Elements with id attributes -->
      div#<xsl:value-of select="$BANNER_DIV_ID"/> {
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH"/>px;
      top: <xsl:value-of select="$TOP_MARGIN_WIDTH"/>px;
      left: <xsl:value-of select="$LEFT_MARGIN_WIDTH"/>px;
      right: <xsl:value-of select="$RIGHT_MARGIN_WIDTH + $CONTENT_SCROLL_BAR_WIDTH"/>px;
      overflow: auto;
      background: #FFFFFF;
      }
    </xsl:element>
    <!--  </style text="text/css" media="all"> -->

    <xsl:element name="style">
      <xsl:attribute name="type">text/css</xsl:attribute>
      <xsl:attribute name="media">screen</xsl:attribute>
      <!-- CSS classes -->
      .showHideHeaderDetailsButtonTableRow {
      }

      .spaceToScrollToFootnotesDiv {
      }

      <!-- Elements with id attributes -->
      div#<xsl:value-of select="$BANNER_DIV_ID"/> {
      position: fixed;
      }

      .VSRFNotesHeight { height: 60px; vertical-align: top;}

      div#<xsl:value-of select="$CONTENT_DIV_ID"/> {
      position: fixed;
      width: <xsl:value-of select="$FULL_CONTENT_WIDTH + $CONTENT_SCROLL_BAR_WIDTH"/>px;
      left: <xsl:value-of select="$LEFT_MARGIN_WIDTH"/>px;
      bottom: 0px;
      overflow: auto;
      background: #FFFFFF;
      padding: 0px;
      }
    </xsl:element>
    <!--  </style text="text/css" media="screen"> -->

    <xsl:element name="style">
      <xsl:attribute name="type">text/css</xsl:attribute>
      <xsl:attribute name="media">print</xsl:attribute>
      <!-- CSS classes -->
      .showHideHeaderDetailsButtonTableRow {
      display: none;
      }

      .spaceToScrollToFootnotesDiv {
      display: none;
      }

      .VSRFNotesHeight { height: 260px; vertical-align: top;}

      <!-- Elements with id attributes -->
      div#<xsl:value-of select="$CONTENT_DIV_ID"/> {
      width: <xsl:value-of select="$FULL_VIEWPORT_WIDTH"/>px;
      left: <xsl:value-of select="$LEFT_MARGIN_WIDTH"/>px;
      right: <xsl:value-of select="$RIGHT_MARGIN_WIDTH"/>px;
      bottom: 0px;
      overflow: auto;
      background: #FFFFFF;
      padding: 0px;
      }
      
      <xsl:if test="$ShowAdministrativeSection='true'">
        #DETAILS {
          display:block !important;
        }
      </xsl:if>
    </xsl:element>
    <!--  </style text="text/css" media="print"> -->
  </xsl:template>

  <xsl:template name="addJavaScript">
    <xsl:element name="script">
      <xsl:attribute name="type">text/javascript</xsl:attribute>
      <![CDATA[
            function toggleDetails(detailsDivId) {
                var administrativeDetailsCheckbox = document.getElementById('administrativeDetailsCheckbox');
                var detailsDiv = document.getElementById(detailsDivId);
                var providerIdentifiersCheckboxDiv = document.getElementById('providerIdentifiersCheckboxDiv');

                if (administrativeDetailsCheckbox.checked) {
                    if (detailsDiv!=null) {
                        detailsDiv.style.display = "block";
                        providerIdentifiersCheckboxDiv.style.display = "inline";
                    }
                } else {
                    if (detailsDiv!=null) {
                        detailsDiv.style.display = "none";
                        providerIdentifiersCheckboxDiv.style.display = "none";
                    }
                }
            }

            function toggleProviderIdentifiers(providerIndividualIdentifierClass, providerOrganisationIdentifierClass) {
                var providerIdentifiersCheckbox = document.getElementById('providerIdentifiersCheckbox');
                var providerIndividualIdentifiers = getElementsByClassName(providerIndividualIdentifierClass);
                var providerOrganisationIdentifiers = getElementsByClassName(providerOrganisationIdentifierClass);
                var identifierDiv;

                if (providerIdentifiersCheckbox.checked) {
                    if (providerIndividualIdentifiers!=null) {
                        for (var i=0; i<providerIndividualIdentifiers.length; i++ ) {
                            identifierDiv = providerIndividualIdentifiers[i];
                            if (identifierDiv!=null) {
                                identifierDiv.style.display = "block";
                            }
                        }
                    }
                    if (providerOrganisationIdentifiers!=null) {
                        for (var i=0; i<providerOrganisationIdentifiers.length; i++ ) {
                            identifierDiv = providerOrganisationIdentifiers[i];
                            if (identifierDiv!=null) {
                                identifierDiv.style.display = "block";
                            }
                        }
                    }
                } else {
                    if (providerIndividualIdentifiers!=null) {
                        for (var i=0; i<providerIndividualIdentifiers.length; i++ ) {
                            identifierDiv = providerIndividualIdentifiers[i];
                            if (identifierDiv!=null) {
                                identifierDiv.style.display = "none";
                            }
                        }
                    }
                    if (providerOrganisationIdentifiers!=null) {
                        for (var i=0; i<providerOrganisationIdentifiers.length; i++ ) {
                            identifierDiv = providerOrganisationIdentifiers[i];
                            if (identifierDiv!=null) {
                                identifierDiv.style.display = "none";
                            }
                        }
                    }
                }
            }

            function load(detailsDiv) {
                var bannerHeight = document.getElementById('BANNER').offsetHeight;
                var contentDiv = document.getElementById('CONTENT');
                contentDiv.style.top = bannerHeight + 4 +"px";
                var administrativeDetailsCheckbox = document.getElementById('administrativeDetailsCheckbox');
                administrativeDetailsCheckbox.checked = false;
                toggleDetails(detailsDiv);
            }

            function cdaRenderSpecificationVersionWarning() {
                var r=confirm("This CDA Document requires a more recent version of the CDA rendering infrastructure than your system currently supports. Please click okay to proceed, or cancel to close the page.");
                if (r==true) {
                } else {
                  var myWindow=window.open('about:blank','_self');
                  myWindow.focus();
                }
            }

            function getElementsByClassName(className) {
                if (document.getElementsByClassName) {
                    return document.getElementsByClassName(className);
                } else {
                    var elms = document.getElementsByTagName('*');
                    var ei = new Array();
                    for (i = 0; i < elms.length; i++) {
                        if (elms[i].getAttribute('class')) {
                            ecl = elms[i].getAttribute('class').split(' ');
                            for (j = 0; j < ecl.length; j++) {
                                if (ecl[j].toLowerCase() == arguments[0].toLowerCase()) {
                                    ei.push(elms[i]);
                                }
                            }
                        } else if (elms[i].className) {
                            ecl = elms[i].className.split(' ');
                            for (j = 0; j < ecl.length;j++) {
                                if (ecl[j].toLowerCase() == arguments[0].toLowerCase()) {
                                    ei.push(elms[i]);
                                }
                            }
                        }
                    }
                    return ei;
                }
            }
            ]]>
    </xsl:element>
    <!-- </script> -->
  </xsl:template>

  <xsl:template name="getHorizontalSpacer">
    <xsl:element name="div">
      <xsl:attribute name="class">horizontalspacer</xsl:attribute>
    </xsl:element>
    <!-- </div> -->
  </xsl:template>

  <xsl:template name="getHalfHorizontalSpacer">
    <xsl:element name="div">
      <xsl:attribute name="class">halfHorizontalspacer</xsl:attribute>
    </xsl:element>
    <!-- </div> -->
  </xsl:template>

  <xsl:template name="getFootnotesTable">
    <xsl:if test="count(//cda:footnote) &gt; 0">
      <xsl:element name="table">
        <xsl:element name="thead">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="class">sectionheader</xsl:attribute>
              FOOTNOTES
            </xsl:element>
            <!-- </td> -->
          </xsl:element>
          <!-- </tr> -->
        </xsl:element>
        <!-- </thead> -->
        <xsl:element name="tbody">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:apply-templates mode="footnote" select=".//cda:footnote"/>
            </xsl:element>
          </xsl:element>
          <!-- </tr> -->
        </xsl:element>
        <!-- </tbody> -->
      </xsl:element>
      <!-- </table> -->
    </xsl:if>
  </xsl:template>

  <xsl:template name="getSpaceToScrollToFootnotesDiv">
    <xsl:if test="count(//cda:footnote) &gt; 0">
      <xsl:element name="div">
        <xsl:attribute name="class">spaceToScrollToFootnotesDiv</xsl:attribute>
        <xsl:attribute name="style">height:1500px; background:#FFFFFF; color:#FFFFFF;</xsl:attribute>
        <xsl:call-template name="printNBSPs">
          <xsl:with-param name="number">1</xsl:with-param>
        </xsl:call-template>
      </xsl:element>
      <!-- </div> -->
    </xsl:if>
  </xsl:template>

  <xsl:template name="getStartOfDocumentIndicator">
    <xsl:call-template name="getDocumentIndicator">
      <xsl:with-param name="indicatorText">START OF DOCUMENT</xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="getEndOfDocumentIndicator">
    <xsl:call-template name="getHorizontalSpacer"/>
    <xsl:call-template name="getDocumentIndicator">
      <xsl:with-param name="indicatorText">END OF DOCUMENT</xsl:with-param>
    </xsl:call-template>
    <xsl:call-template name="getHorizontalSpacer"/>
  </xsl:template>

  <xsl:template name="getDocumentIndicator">
    <xsl:param name="indicatorText"/>

    <xsl:if test="$indicatorText and
                      string-length($indicatorText) &gt; 0">
      <xsl:element name="table">
        <xsl:attribute name="class">pageWidth</xsl:attribute>
        <xsl:attribute name="cellspacing">0</xsl:attribute>
        <xsl:attribute name="cellpadding">0</xsl:attribute>
        <xsl:attribute name="style">
          border: 0px SOLID #000000;
        </xsl:attribute>
        <xsl:attribute name="summary">
          <xsl:value-of select="$indicatorText"/>
        </xsl:attribute>
        <xsl:element name="tbody">
          <xsl:element name="tr">
            <xsl:element name="td">
              <xsl:attribute name="style">
                text-align: center;
                vertical-align: middle;
                background: #000000;
                color: #FFFFFF;
              </xsl:attribute>
              <xsl:element name="b">
                <xsl:element name="i">
                  <xsl:value-of select="$indicatorText"/>
                </xsl:element>
              </xsl:element>
              <!-- </b> -->
            </xsl:element>
            <!-- </td> -->
          </xsl:element>
          <!-- </tr> -->
        </xsl:element>
        <!-- </tbody> -->
      </xsl:element>
      <!-- </table> -->
    </xsl:if>
  </xsl:template>

  <xsl:template name="renderLogo">
    <xsl:if test="//cda:observationMedia[@ID='LOGO']/cda:value[@mediaType='image/png']/cda:reference/@value">
      <xsl:element name="div">
        <xsl:attribute name="class">halfPageWidth</xsl:attribute>
        <xsl:attribute name="style">text-align: center;</xsl:attribute>
        <xsl:element name="img">
          <xsl:attribute name="id">
            <xsl:value-of select="$LOGO_IMG_ID"/>
          </xsl:attribute>
          <xsl:attribute name="alt">logo</xsl:attribute>
          <xsl:attribute name="src">
            <xsl:value-of select="//cda:observationMedia[@ID='LOGO']/cda:value[@mediaType='image/png']/cda:reference/@value"/>
          </xsl:attribute>
        </xsl:element>
        <!-- </img> -->
      </xsl:element>
      <!-- </div> -->
    </xsl:if>
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] STRUCTURE TEMPLATES -->




  <!-- UTILITY TEMPLATES -->
  <!--================================================================================================================================================================================-->
  <xsl:template name="show-name">
    <xsl:param name="name"/>

    <xsl:choose>
      <xsl:when test="$name/cda:family">
        <xsl:if test="$name/cda:prefix">
          <xsl:value-of select="$name/cda:prefix"/>
          <xsl:text> </xsl:text>
        </xsl:if>
        <xsl:value-of select="$name/cda:given"/>
        <xsl:text> </xsl:text>
        <xsl:value-of select="$name/cda:family"/>
        <xsl:if test="$name/cda:suffix">
          <xsl:text>, </xsl:text>
          <xsl:value-of select="$name/cda:suffix"/>
        </xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$name"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="show-preferred-name">
    <xsl:param name="namearray" select="/cda:ClinicalDocument/cda:recordTarget/cda:patientRole/cda:patient/cda:name"/>

    <!-- If there is an alias use it, otherwise use name -->
    <xsl:choose>
    <xsl:when test="$namearray[2]">
       <xsl:value-of select="$namearray[2]/cda:family"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="show-patient-name">
        <xsl:with-param name="name" select="$namearray[1]"/>
      </xsl:call-template>
   </xsl:otherwise>
   </xsl:choose>
  
  </xsl:template>
  
  <xsl:template name="show-patient-name">
    <xsl:param name="name"/>

    <xsl:choose>
      <xsl:when test="$name/cda:family">
        <xsl:if test="$name/cda:prefix">
          <xsl:value-of select="$name/cda:prefix"/>
          <xsl:text> </xsl:text>
        </xsl:if>
        <xsl:value-of select="$name/cda:given"/>
        <xsl:text> </xsl:text>
        <xsl:call-template name="toUpperCase">
          <xsl:with-param name="data">
            <xsl:value-of select="$name/cda:family"/>
          </xsl:with-param>
        </xsl:call-template>
        <xsl:if test="$name/cda:suffix">
          <xsl:text>, </xsl:text>
          <xsl:value-of select="$name/cda:suffix"/>
        </xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$name"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="show-address">
    <xsl:param name="address"/>

    <xsl:if test="$address">
      <xsl:choose>
        <xsl:when test="$address/@nullFlavor='NA'">
          <xsl:element name="b">No Fixed Address</xsl:element>
        </xsl:when>
        <xsl:otherwise>
          <xsl:element name="b">
            <xsl:call-template name="getAddressUseDescriptor">
              <xsl:with-param name="code" select="./@use"/>
            </xsl:call-template>
            <xsl:text>:</xsl:text>
          </xsl:element>
          <xsl:element name="br"/>
          <xsl:for-each select="$address/cda:streetAddressLine">
            <xsl:if test="string-length(.)>0">
              <xsl:value-of select="."/>
              <xsl:text>, </xsl:text>
            </xsl:if>
          </xsl:for-each>
          <xsl:if test="$address/cda:streetName">
            <xsl:value-of select="$address/cda:streetName"/>
            <xsl:text> </xsl:text>
            <xsl:value-of select="$address/cda:houseNumber"/>
            <xsl:text>, </xsl:text>
          </xsl:if>
          <xsl:if test="string-length($address/cda:city)>0">
            <xsl:value-of select="$address/cda:city"/>
            <xsl:text>, </xsl:text>
          </xsl:if>
          <xsl:if test="string-length($address/cda:state)>0">
            <xsl:value-of select="$address/cda:state"/>
            <xsl:text>, </xsl:text>
          </xsl:if>
          <xsl:if test="string-length($address/cda:postalCode)>0">
            <xsl:value-of select="$address/cda:postalCode"/>
            <xsl:text>, </xsl:text>
          </xsl:if>
          <xsl:if test="string-length($address/cda:country)>0">
            <xsl:value-of select="$address/cda:country"/>
          </xsl:if>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
    <xsl:element name="br"/>
  </xsl:template>

  <xsl:template name="show-telecom">
    <xsl:param name="telecom"/>
    <xsl:if test="$telecom">
      <xsl:choose>
        <xsl:when test="contains($telecom/@value, ':')">
          <xsl:variable name="value" select="substring-after($telecom/@value, ':')"/>
          <xsl:if test="$value">
            <xsl:value-of select="$value"/>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$telecom/@value"/>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:text/>(<xsl:call-template name="getTelecomUseDescriptors">
        <xsl:with-param name="codes" select="./@use"/>
      </xsl:call-template>)
    </xsl:if>
  </xsl:template>

  <xsl:template name="getTelecomUseDescriptors">
    <xsl:param name="codes" />

    <xsl:variable name="newlist" select="concat(normalize-space($codes), ' ')" />
    <xsl:variable name="first" select="substring-before($newlist, ' ')" />
    <xsl:variable name="remaining" select="substring-after($newlist, ' ')" />
    <xsl:call-template name="getTelecomUseDescriptor">
      <xsl:with-param name="code">
        <xsl:value-of select="$first"/>
      </xsl:with-param>
    </xsl:call-template>
    <xsl:if test="$remaining">
      <xsl:text>, </xsl:text>
      <xsl:call-template name="getTelecomUseDescriptors">
        <xsl:with-param name="codes" select="$remaining" />
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <xsl:template name="getTelecomUseDescriptor">
    <xsl:param name="code"/>
    <xsl:choose>
      <xsl:when test="$code='H'">
        <xsl:text>Home</xsl:text>
      </xsl:when>
      <xsl:when test="$code='HP'">
        <xsl:text>Primary Home</xsl:text>
      </xsl:when>
      <xsl:when test="$code='HV'">
        <xsl:text>Vacation Home</xsl:text>
      </xsl:when>
      <xsl:when test="$code='WP'">
        <xsl:text>Workplace</xsl:text>
      </xsl:when>
      <xsl:when test="$code='AS'">
        <xsl:text>Answering Service</xsl:text>
      </xsl:when>
      <xsl:when test="$code='EC'">
        <xsl:text>Emergency Contact</xsl:text>
      </xsl:when>
      <xsl:when test="$code='MC'">
        <xsl:text>Mobile Contact</xsl:text>
      </xsl:when>
      <xsl:when test="$code='PG'">
        <xsl:text>PG Pager</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>Unknown Usage</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="getAddressUseDescriptor">
    <xsl:param name="code"/>
    <xsl:choose>
      <xsl:when test="$code='WP'">
        <xsl:text>Work Place</xsl:text>
      </xsl:when>
      <xsl:when test="$code='PST'">
        <xsl:text>Postal Address</xsl:text>
      </xsl:when>
      <xsl:when test="$code='TMP'">
        <xsl:text>Temporary Address</xsl:text>
      </xsl:when>
      <xsl:when test="$code='H'">
        <xsl:text>Home Address</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>Other Address</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="show-date">
    <xsl:param name="datetime"/>
    <xsl:call-template name="trim">
      <xsl:with-param name="string">
        <xsl:choose>
          <xsl:when test="not($datetime)">
            <xsl:call-template name="formatDate">
              <xsl:with-param name="date" select="@value"/>
            </xsl:call-template>
            <xsl:text/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="formatDate">
              <xsl:with-param name="date" select="$datetime/@value"/>
            </xsl:call-template>
            <xsl:text/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="show-time">
    <xsl:param name="datetime"/>

    <xsl:call-template name="trim">
      <xsl:with-param name="string">
        <xsl:choose>
          <xsl:when test="not($datetime)">
            <xsl:call-template name="formatDateTime">
              <xsl:with-param name="date" select="@value"/>
            </xsl:call-template>
            <xsl:text/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="formatDateTime">
              <xsl:with-param name="date" select="$datetime/@value"/>
            </xsl:call-template>
            <xsl:text/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="formatDateTime">
    <xsl:param name="date"/>
    <!-- day -->
    <xsl:choose>
      <xsl:when test="substring ($date, 7, 1)='0'">
        <xsl:value-of select="substring ($date, 8, 1)"/>
      </xsl:when>
      <xsl:when test="string-length(substring ($date, 7, 1)) &gt; 0">
        <xsl:value-of select="substring ($date, 7, 2)"/>
      </xsl:when>
      <xsl:otherwise/>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <!-- month -->
    <xsl:variable name="month" select="substring ($date, 5, 2)"/>
    <xsl:choose>
      <xsl:when test="$month='01'">
        <xsl:text>Jan</xsl:text>
      </xsl:when>
      <xsl:when test="$month='02'">
        <xsl:text>Feb</xsl:text>
      </xsl:when>
      <xsl:when test="$month='03'">
        <xsl:text>Mar</xsl:text>
      </xsl:when>
      <xsl:when test="$month='04'">
        <xsl:text>Apr</xsl:text>
      </xsl:when>
      <xsl:when test="$month='05'">
        <xsl:text>May</xsl:text>
      </xsl:when>
      <xsl:when test="$month='06'">
        <xsl:text>Jun</xsl:text>
      </xsl:when>
      <xsl:when test="$month='07'">
        <xsl:text>Jul</xsl:text>
      </xsl:when>
      <xsl:when test="$month='08'">
        <xsl:text>Aug</xsl:text>
      </xsl:when>
      <xsl:when test="$month='09'">
        <xsl:text>Sep</xsl:text>
      </xsl:when>
      <xsl:when test="$month='10'">
        <xsl:text>Oct</xsl:text>
      </xsl:when>
      <xsl:when test="$month='11'">
        <xsl:text>Nov</xsl:text>
      </xsl:when>
      <xsl:when test="$month='12'">
        <xsl:text>Dec</xsl:text>
      </xsl:when>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <!-- year -->
    <xsl:value-of select="substring ($date, 1, 4)"/>
    <!-- time -->
    <xsl:if test="string-length($date) > 8">
      <xsl:text> </xsl:text>
      <xsl:variable name="time">
        <xsl:value-of select="substring($date,9,6)"/>
      </xsl:variable>
      <xsl:variable name="hh">
        <xsl:value-of select="substring($time,1,2)"/>
      </xsl:variable>
      <xsl:variable name="mm">
        <xsl:value-of select="substring($time,3,2)"/>
      </xsl:variable>
      <xsl:variable name="ss">
        <xsl:value-of select="substring($time,5,2)"/>
      </xsl:variable>
      <xsl:if test="string-length($hh)&gt;1">
        <xsl:value-of select="$hh"/>
        <xsl:if
            test="string-length($mm)&gt;1 and not(contains($mm,'-')) and not (contains($mm,'+'))">
          <xsl:text>:</xsl:text>
          <xsl:value-of select="$mm"/>
        </xsl:if>
      </xsl:if>
    </xsl:if>
    <!-- time zone -->
    <xsl:if test="(contains($date,'+') and string-length(substring-after($date,'+')) = 4) or
                      (contains($date,'-') and string-length(substring-after($date,'-')) = 4)">
      <xsl:variable name="tzon">
        <xsl:choose>
          <xsl:when test="contains($date,'+')">
            <xsl:text>+</xsl:text>
            <xsl:value-of select="substring-after($date, '+')"/>
          </xsl:when>
          <xsl:when test="contains($date,'-')">
            <xsl:text>-</xsl:text>
            <xsl:value-of select="substring-after($date, '-')"/>
          </xsl:when>
        </xsl:choose>
      </xsl:variable>
      <xsl:if test="string-length($tzon) &gt; 0">
        <xsl:value-of select="$tzon"/>
      </xsl:if>
    </xsl:if>
  </xsl:template>

  <xsl:template name="getProviderIndividualIdentifier">
    <xsl:param name="entityIdentifier"/>
    <xsl:if test="$entityIdentifier and
                      $entityIdentifier/@classCode and
                      $entityIdentifier/@classCode='IDENT' and
                      $entityIdentifier/ext:id and
                      $entityIdentifier/ext:id/@root and
                      string-length($entityIdentifier/ext:id/@root) &gt; 0">
      <xsl:choose>
        <!-- HI Service: HPI-I -->
        <xsl:when test="starts-with($entityIdentifier/ext:id/@root, '1.2.36.1.2001.1003.0.') and
                                $entityIdentifier/ext:id/@assigningAuthorityName='HPI-I' and
                                $entityIdentifier/ext:assigningGeographicArea/@classCode='PLC' and
                                $entityIdentifier/ext:assigningGeographicArea/ext:name='National Identifier'">
          <xsl:variable name="identifier">
            <xsl:value-of select="substring-after($entityIdentifier/ext:id/@root, '1.2.36.1.2001.1003.0.')"/>
          </xsl:variable>
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:value-of select="$PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS"/>
            </xsl:attribute>
            <xsl:text>[HPI-I: </xsl:text>
            <xsl:call-template name="formatHI">
              <xsl:with-param name="hiValue">
                <xsl:value-of select="$identifier"/>
              </xsl:with-param>
            </xsl:call-template>
            <xsl:text>]</xsl:text>
          </xsl:element>
        </xsl:when>
        <!-- Identifiers Other than HI Service e.g. MRN, Medicare Provider Number, etc. -->
        <xsl:otherwise>
          <xsl:call-template name="getNonHIServiceProviderIdentifierDiv">
            <xsl:with-param name="entityIdentifier" select="$entityIdentifier"/>
            <xsl:with-param name="providerIdentifierType">
              <xsl:value-of select="$PROVIDER_INDIVIDUAL_IDENTIFIER_CSS_CLASS"/>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

  <xsl:template name="formatDate">
    <xsl:param name="date"/>
    <!-- day -->
    <xsl:choose>
      <xsl:when test="substring ($date, 7, 1)='0'">
        <xsl:value-of select="substring ($date, 8, 1)"/>
      </xsl:when>
      <xsl:when test="string-length(substring ($date, 7, 1)) &gt; 0">
        <xsl:value-of select="substring ($date, 7, 2)"/>
      </xsl:when>
      <xsl:otherwise/>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <!-- month -->
    <xsl:variable name="month" select="substring ($date, 5, 2)"/>
    <xsl:choose>
      <xsl:when test="$month='01'">
        <xsl:text>Jan</xsl:text>
      </xsl:when>
      <xsl:when test="$month='02'">
        <xsl:text>Feb</xsl:text>
      </xsl:when>
      <xsl:when test="$month='03'">
        <xsl:text>Mar</xsl:text>
      </xsl:when>
      <xsl:when test="$month='04'">
        <xsl:text>Apr</xsl:text>
      </xsl:when>
      <xsl:when test="$month='05'">
        <xsl:text>May</xsl:text>
      </xsl:when>
      <xsl:when test="$month='06'">
        <xsl:text>Jun</xsl:text>
      </xsl:when>
      <xsl:when test="$month='07'">
        <xsl:text>Jul</xsl:text>
      </xsl:when>
      <xsl:when test="$month='08'">
        <xsl:text>Aug</xsl:text>
      </xsl:when>
      <xsl:when test="$month='09'">
        <xsl:text>Sep</xsl:text>
      </xsl:when>
      <xsl:when test="$month='10'">
        <xsl:text>Oct</xsl:text>
      </xsl:when>
      <xsl:when test="$month='11'">
        <xsl:text>Nov</xsl:text>
      </xsl:when>
      <xsl:when test="$month='12'">
        <xsl:text>Dec</xsl:text>
      </xsl:when>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <!-- year -->
    <xsl:value-of select="substring ($date, 1, 4)"/>
  </xsl:template>

  <xsl:template name="getProviderOrganisationIdentifier">
    <xsl:param name="entityIdentifier"/>

    <xsl:if test="$entityIdentifier and
                      $entityIdentifier/@classCode and
                      $entityIdentifier/@classCode='IDENT' and
                      $entityIdentifier/ext:id and
                      $entityIdentifier/ext:id/@root and
                      string-length($entityIdentifier/ext:id/@root) &gt; 0">
      <xsl:choose>
        <!-- HI Service: HPI-O -->
        <xsl:when test="starts-with($entityIdentifier/ext:id/@root, '1.2.36.1.2001.1003.0.') and
                    $entityIdentifier/ext:id/@assigningAuthorityName='HPI-O' and
                    $entityIdentifier/ext:assigningGeographicArea/@classCode='PLC' and
                    $entityIdentifier/ext:assigningGeographicArea/ext:name='National Identifier'">
          <xsl:variable name="identifier">
            <xsl:value-of select="substring-after($entityIdentifier/ext:id/@root, '1.2.36.1.2001.1003.0.')"/>
          </xsl:variable>
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:value-of select="$PROVIDER_ORGANISATION_IDENTIFIER_CSS_CLASS"/>
            </xsl:attribute>
            <xsl:text>[HPI-O: </xsl:text>
            <xsl:call-template name="formatHI">
              <xsl:with-param name="hiValue">
                <xsl:value-of select="$identifier"/>
              </xsl:with-param>
            </xsl:call-template>
            <xsl:text>]</xsl:text>
          </xsl:element>
        </xsl:when>
        <!-- Identifiers Other than HI Service e.g. Facility Identifier etc. -->
        <xsl:otherwise>
          <xsl:call-template name="getNonHIServiceProviderIdentifierDiv">
            <xsl:with-param name="entityIdentifier" select="$entityIdentifier"/>
            <xsl:with-param name="providerIdentifierType">
              <xsl:value-of select="$PROVIDER_ORGANISATION_IDENTIFIER_CSS_CLASS"/>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

  <xsl:template name="getNonHIServiceProviderIdentifierDiv">
    <xsl:param name="entityIdentifier"/>
    <xsl:param name="providerIdentifierType"/>

    <xsl:if test="$entityIdentifier/ext:code and
            $entityIdentifier/ext:code/@code and
            string-length($entityIdentifier/ext:code/@code) &gt; 0 and
            $entityIdentifier/ext:code/@codeSystem and
            $entityIdentifier/ext:code/@codeSystem='2.16.840.1.113883.12.203'">
      <xsl:variable name="identifier">
        <xsl:choose>
          <xsl:when test="$entityIdentifier/ext:id/@extension and
                        string-length($entityIdentifier/ext:id/@extension) &gt; 0">
            <xsl:value-of select="$entityIdentifier/ext:id/@extension"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="substring-after-last-occurance">
              <xsl:with-param name="string" select="$entityIdentifier/ext:id/@root"/>
              <xsl:with-param name="argument">.</xsl:with-param>
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="identifierType">
        <xsl:call-template name="getHL7V2Table0203IdentifierCodeDescription">
          <xsl:with-param name="code" select="$entityIdentifier/ext:code/@code"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:variable name="identifierAssigningAuthorityName">
        <xsl:if test="$entityIdentifier/ext:id/@assigningAuthorityName and
                    string-length($entityIdentifier/ext:id/@assigningAuthorityName) &gt; 0">
          <xsl:value-of select="$entityIdentifier/ext:id/@assigningAuthorityName"/>
        </xsl:if>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$identifierAssigningAuthorityName and
                    string-length($identifierAssigningAuthorityName) &gt; 0">
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:value-of select="$providerIdentifierType"/>
            </xsl:attribute>
            <xsl:text>[</xsl:text>
            <xsl:value-of select="$identifierAssigningAuthorityName"/>
            <xsl:text>: </xsl:text>
            <xsl:value-of select="$identifier"/>
            <xsl:text>]</xsl:text>
          </xsl:element>
          <!-- </div> -->

        </xsl:when>
        <xsl:when test="$identifierType and
                    string-length($identifierType) &gt; 0">
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:value-of select="$providerIdentifierType"/>
            </xsl:attribute>
            <xsl:text>[</xsl:text>
            <xsl:value-of select="$identifierType"/>
            <xsl:text>: </xsl:text>
            <xsl:value-of select="$identifier"/>
            <xsl:text>]</xsl:text>
          </xsl:element>
          <!-- </div> -->
        </xsl:when>
        <xsl:otherwise>
          <xsl:element name="div">
            <xsl:attribute name="class">
              <xsl:value-of select="$providerIdentifierType"/>
            </xsl:attribute>
            <xsl:text>[Local Identifier: </xsl:text>
            <xsl:value-of select="$identifier"/>
            <xsl:text>]</xsl:text>
          </xsl:element>
          <!-- </div> -->
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

  <xsl:template name="substring-after-last-occurance">
    <xsl:param name="string"/>
    <xsl:param name="argument"/>

    <xsl:if test="$string and
                      string-length($string) &gt; 0 and
                      $argument and
                      string-length($argument) &gt; 0">
      <xsl:choose>
        <xsl:when test="contains($string, $argument)">
          <xsl:call-template name="substring-after-last-occurance">
            <xsl:with-param name="string" select="substring-after($string, $argument)"/>
            <xsl:with-param name="argument" select="$argument"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$string"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

  <xsl:template name="getHL7V2Table0203IdentifierCodeDescription">
    <xsl:param name="code"/>

    <xsl:choose>
      <xsl:when test="$code='MR'">
        <xsl:text>MRN/URN</xsl:text>
      </xsl:when>
      <xsl:when test="$code='FI'">
        <xsl:text>Facility Identifier</xsl:text>
      </xsl:when>
      <xsl:when test="$code='SR'">
        <xsl:text>State Identifier</xsl:text>
      </xsl:when>
      <xsl:when test="$code='LR'">
        <xsl:text>Local Identifier</xsl:text>
      </xsl:when>
      <xsl:when test="$code='PRN'">
        <xsl:text>Provider Number</xsl:text>
      </xsl:when>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="toUpperCase">
    <xsl:param name="data"/>

    <xsl:if test="$data">
      <xsl:value-of select="translate($data,'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
    </xsl:if>
  </xsl:template>

  <xsl:template name="calculateAgeInYears">
    <xsl:param name="birthDate"/>
    <xsl:param name="docDate"/>

    <xsl:variable name="birthYear" select="substring($birthDate,1,4)"/>
    <xsl:variable name="birthMonth" select="substring($birthDate,5,2)"/>
    <xsl:variable name="birthDay" select="substring($birthDate,7,2)"/>

    <xsl:variable name="currentYear" select="substring($docDate,1,4)"/>
    <xsl:variable name="currentMonth" select="substring($docDate,5,2)"/>
    <xsl:variable name="currentDay" select="substring($docDate,7,2)"/>

    <xsl:variable name="startAge" select="$currentYear - $birthYear"/>
    <xsl:choose>
      <xsl:when test="$currentMonth &lt; $birthMonth">
        <xsl:variable name="age" select="$startAge - 1"/>
        <xsl:value-of select="$age"/>
      </xsl:when>
      <xsl:when test="$currentMonth = $birthMonth">
        <xsl:choose>
          <xsl:when test="$currentDay &lt; $birthDay">
            <xsl:variable name="age" select="$startAge - 1"/>
            <xsl:value-of select="$age"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="age" select="$startAge"/>
            <xsl:value-of select="$age"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="age" select="$startAge"/>
        <xsl:value-of select="$age"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="formatHI">
    <xsl:param name="hiValue"/>

    <xsl:if test="$hiValue">
      <xsl:variable name="identifier">
        <xsl:choose>
          <xsl:when test="string-length($hiValue) &gt; 16">
            <xsl:value-of select="substring($hiValue, string-length($hiValue)-15, string-length($hiValue))"/>
          </xsl:when>
          <xsl:when test="string-length($hiValue) = 16">
            <xsl:value-of select="$hiValue"/>
          </xsl:when>
        </xsl:choose>
      </xsl:variable>
      <xsl:value-of select="substring($identifier,1,4)"/>
      <xsl:text/>
      <xsl:value-of select="substring($identifier,5,4)"/>
      <xsl:text/>
      <xsl:value-of select="substring($identifier,9,4)"/>
      <xsl:text/>
      <xsl:value-of select="substring($identifier,13,4)"/>
    </xsl:if>
  </xsl:template>

  <xsl:template name="printNBSPs">
    <xsl:param name="number"/>

    <xsl:if test="$number &gt; 0">
      <xsl:element name="span">
        <xsl:attribute name="class">nbspSpan</xsl:attribute>
      </xsl:element>
      <xsl:call-template name="printNBSPs">
        <xsl:with-param name="number" select="$number - 1"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <xsl:template name="lTrim">
    <xsl:param name="string"/>
    <xsl:choose>
      <xsl:when test="substring($string, 1, 1) = ''">
        <xsl:value-of select="$string"/>
      </xsl:when>
      <xsl:when test="normalize-space(substring($string, 1, 1)) = ''">
        <xsl:call-template name="lTrim">
          <xsl:with-param name="string" select="substring($string, 2)"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$string"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="rTrim">
    <xsl:param name="string"/>
    <xsl:choose>
      <xsl:when test="substring($string, 1, 1) = ''">
        <xsl:value-of select="$string"/>
      </xsl:when>
      <xsl:when test="normalize-space(substring($string, string-length($string))) = ''">
        <xsl:call-template name="rTrim">
          <xsl:with-param name="string" select="substring($string, 1, string-length($string) - 1)"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$string"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="trim">
    <xsl:param name="string"/>
    <xsl:call-template name="rTrim">
      <xsl:with-param name="string">
        <xsl:call-template name="lTrim">
          <xsl:with-param name="string" select="$string"/>
        </xsl:call-template>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="lastIndexOf">
    <xsl:param name="string" />
    <xsl:param name="char" />
    <xsl:choose>
      <!-- if the string contains the character... -->
      <xsl:when test="contains($string, $char)">
        <!-- call the template recursively... -->
        <xsl:call-template name="lastIndexOf">
          <!-- with the string being the string after the character
                    -->
          <xsl:with-param name="string"
              select="substring-after($string, $char)" />
          <!-- and the character being the same as before -->
          <xsl:with-param name="char" select="$char" />
        </xsl:call-template>
      </xsl:when>
      <!-- otherwise, return the value of the string -->
      <xsl:otherwise>
        <xsl:value-of select="$string" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="getIdentifierFromII">
    <xsl:param name="iiVariable"/>
    <xsl:choose>
      <xsl:when test="string-length($iiVariable/@root)>0 and string-length($iiVariable/@extension)>0">
        <xsl:value-of select="$iiVariable/@extension"/>
      </xsl:when>
      <xsl:when test="string-length($iiVariable/@root)>0">
        <xsl:call-template name="lastIndexOf">
          <xsl:with-param name="string" select="$iiVariable/@root"/>
          <xsl:with-param name="char" select="'.'"/>
        </xsl:call-template>
      </xsl:when>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="addID">
    <xsl:param name="element"/>
    <xsl:if test="$element/@ID and
                      string-length($element/@ID) &gt; 0">
      <xsl:attribute name="id">
        <xsl:value-of select="$element/@ID"/>
      </xsl:attribute>
    </xsl:if>
  </xsl:template>

  <!--================================================================================================================================================================================-->
  <!-- [END] UTILITY TEMPLATES -->
</xsl:stylesheet>